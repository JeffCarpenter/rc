;;; .ecb-user-layouts.el --- user defined ECB-layouts

;; Copyright (C) 2001 - 2005 Jesper Nordenberg
;; Copyright (C) 2001 - 2005 Free Software Foundation, Inc.
;; Copyright (C) 2001 - 2005 Klaus Berndl <klaus.berndl@sdm.de>

;; Author: Klaus Berndl <klaus.berndl@sdm.de>
;; Maintainer: Klaus Berndl <klaus.berndl@sdm.de>
;; Keywords: java, class, browser

;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the Free
;; Software Foundation; either version 2, or (at your option) any later
;; version.

;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;; FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
;; more details.

;; You should have received a copy of the GNU General Public License along
;; with GNU Emacs; see the file COPYING. If not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

;;; Commentary:

;; This file contains all user-defined ECB-layouts created by the command
;; `ecb-create-new-layout'.

;; !!! DO NOT EDIT THIS FILE MANUALLY - IT IS GENERATED BY ECB !!!


(ecb-layout-define "sharad-leftright-analyse-etc" left-right
  "This function creates the following layout:

   --------------------------------------------------------------
   |              |                               |             |
   |  Directories |                               |  Methods    |
   |              |                               |             |
   |              |                               |             |
   |              |                               |             |
   |              |                               |             |
   |              |                               |             |
   |--------------|             Edit              |-------------|
   |              |                               |             |
   |  Sources     |                               |             |
   |              |                               |             |
   |--------------|                               |  Analyse    |
   |              |                               |             |
   |  History     |                               |             |
   |              |                               |             |
   --------------------------------------------------------------
   |                                                            |
   |                    Compilation                             |
   |                                                            |
   --------------------------------------------------------------

If you have not set a compilation-window in `ecb-compile-window-height' then
the layout contains no persistent compilation window and the other windows get a
little more place."
  (ecb-set-methods-buffer)
  (ecb-split-ver 0.4)
  (ecb-set-sources-buffer)
  (ecb-split-ver 0.5)
  (ecb-set-history-buffer)
  (select-window (next-window (next-window)))
  (ecb-set-directories-buffer)
  (ecb-split-ver 0.5)
  (ecb-set-analyse-buffer)
  (select-window (previous-window (previous-window (selected-window) 0) 0)))

(ecb-layout-define "sharad-leftright-analyse-etc-reverse" left-right
  "This function creates the following layout:

   --------------------------------------------------------------
   |              |                               |             |
   |  Directories |                               |  Methods    |
   |              |                               |             |
   |              |                               |             |
   |              |                               |             |
   |              |                               |             |
   |              |                               |             |
   |--------------|             Edit              |-------------|
   |              |                               |             |
   |  Sources     |                               |             |
   |              |                               |             |
   |--------------|                               |  Analyse    |
   |              |                               |             |
   |  History     |                               |             |
   |              |                               |             |
   --------------------------------------------------------------
   |                                                            |
   |                    Compilation                             |
   |                                                            |
   --------------------------------------------------------------

If you have not set a compilation-window in `ecb-compile-window-height' then
the layout contains no persistent compilation window and the other windows get a
little more place."
  (ecb-set-directories-buffer)
  (ecb-split-ver 0.5)
  (ecb-set-analyse-buffer)
  (select-window (next-window (next-window)))
  (ecb-set-methods-buffer)
  (ecb-split-ver 0.4)
  (ecb-set-sources-buffer)
  (ecb-split-ver 0.5)
  (ecb-set-history-buffer)
  (select-window (previous-window (previous-window (selected-window) 0) 0)))

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(auto-compression-mode t nil (jka-compr))
 '(bbdb-check-zip-codes-p nil)
 '(bbdb-default-country "INDIA")
 '(bbdb-north-american-phone-numbers-p nil)
 '(blink-cursor-mode t)
 '(calendar-mark-diary-entries-flag t)
 '(calendar-view-diary-initially-flag t)
 '(canlock-password "93d68f0366b0f7bb850c020c9b41a029023b0526")
 '(case-fold-search t)
 '(color-theme-selection "Arjen" nil (color-theme))
 '(column-number-mode t)
 '(current-language-environment "ASCII")
 '(default-input-method "english-dvorak")
 '(diary-entry-marker "+")
 '(diary-file "~/.Organize/emacs/diary/diary")
 '(diary-mail-addr "sh4r4d _at_ _G-mail_")
 '(display-time-24hr-format nil)
 '(display-time-day-and-date t)
 '(display-time-mail-face (quote default))
 '(display-time-mail-file nil)
 '(display-time-mode t)
 ;; '(ecb-auto-activate t)
 ;; '(ecb-layout-window-sizes (quote (("sharad-leftright-analyse" (0.13812154696132597 . 0.5818181818181818) (0.13812154696132597 . 0.23636363636363636) (0.13812154696132597 . 0.16363636363636364) (0.16022099447513813 . 0.43636363636363634) (0.16022099447513813 . 0.5454545454545454)))))
 ;; '(ecb-major-modes-show-or-hide (quote ((js-mode cperl-mode perl-mode emacs-lisp-mode lisp-mode c-mode shell-script-mode) mail-mode fundamental-mode planner-mode)))
 ;; '(ecb-options-version "2.32")
 '(global-font-lock-mode t nil (font-lock))
 '(gnus-registry-install t)
 '(ido-enable-tramp-completion nil)
 '(ido-use-filename-at-point (quote guess))
 '(load-home-init-file t t)
 '(menu-bar-mode nil)
 '(mm-inline-text-html-with-images t)
 '(newsticker-url-list (quote (("OSNews" "http://www.osnews.com/feeds" nil nil nil))))
 '(org-agenda-files (file-expand-wildcards "~/.Organize/emacs/org/*/*.org"))
 '(org-agenda-include-diary t)
 '(planner-annotation-strip-directory t)
 '(planner-annotation-use-relative-file t)
 '(planner-appt-forthcoming-look-at-cyclic-flag t)
 '(planner-appt-schedule-cyclic-behaviour (quote future))
 '(planner-appt-update-appts-on-save-flag t)
 '(planner-create-section-function (quote planner-create-at-bottom))
 '(planner-cyclic-diary-nag t)
 '(planner-diary-appts-file "~/.Organize/emacs/diary/diary")
 '(planner-diary-cal-desk-file "~/.Organize/emacs/diary/diary")
 '(planner-diary-exclude-appts-from-diary nil)
 '(planner-diary-file "~/.Organize/emacs/diary/diary")
 '(planner-diary-number-of-days 5)
 '(planner-diary-private-file "~/.Organize/emacs/diary/private")
 '(planner-diary-private-number-of-days 1)
 '(planner-diary-public-file "~/.Organize/emacs/diary/public")
 '(planner-diary-public-number-of-days 1)
 '(planner-diary-use-appts t)
 '(planner-diary-use-cal-desk t)
 '(planner-diary-use-diary t)
 '(planner-diary-use-private-diary t)
 '(planner-diary-use-public-diary t)
 '(planner-expand-name-favor-future-p t)
 '(planner-renumber-notes-automatically t)
 '(planner-renumber-tasks-automatically t)
 '(planner-sections (quote ((tasks . "Tasks") (notes . "Notes") (diary . "Diary") (env . "Environment"))))
 '(planner-tasks-file-behavior (quote close))
 '(safe-local-variable-values (quote ((folded-file . t) (auto-fill-mode))))
 '(save-abbrevs t)
 '(save-place t nil (saveplace))
 '(scroll-conservatively 4)
 '(session-set-file-name-exclude-regexp "/\\.overview\\|.session\\|News/\\|\\.Organize/")
 '(show-paren-mode t nil (paren))
 '(speedbar-directory-unshown-regexp "^\\(CVS\\|RCS\\|SCCS\\|.deps\\)\\'")
 '(speedbar-frame-parameters (quote ((minibuffer) (width . 20) (border-width . 0) (menu-bar-lines . 0) (tool-bar-lines . 0) (unsplittable . t) (set-background-color "black"))))
 '(speedbar-supported-extension-expressions (quote (".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".f\\(90\\|77\\|or\\)?" ".ad*" ".p[lm]" ".tcl" ".m" ".scm" ".pm" ".py" ".g" ".s?html" "[Mm]akefile\\(\\.in\\|am\\)?" "configure.ac" ".ml*" ".tig" ".\\(ll\\|yy\\)")))
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))
 '(tramp-fish-method "fish")
 '(tramp-verbose 10)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(vc-follow-symlinks nil)
 '(view-read-only t)
 '(w3m-default-display-inline-images t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(background "blue")
 '(font-lock-builtin-face ((((class color) (background dark)) (:foreground "Turquoise"))))
 '(font-lock-comment-face ((t (:foreground "MediumAquamarine"))))
 '(font-lock-constant-face ((((class color) (background dark)) (:bold t :foreground "DarkOrchid"))))
 '(font-lock-doc-string-face ((t (:foreground "green2"))))
 '(font-lock-function-name-face ((t (:foreground "SkyBlue"))))
 '(font-lock-keyword-face ((t (:bold t :foreground "CornflowerBlue"))))
 '(font-lock-preprocessor-face ((t (:italic nil :foreground "CornFlowerBlue"))))
 '(font-lock-reference-face ((t (:foreground "DodgerBlue"))))
 '(font-lock-string-face ((t (:foreground "LimeGreen"))))
 '(font-lock-type-face ((t (:foreground "#9290ff"))))
 '(font-lock-variable-name-face ((t (:foreground "PaleGreen"))))
 '(font-lock-warning-face ((((class color) (background dark)) (:foreground "yellow" :background "red"))))
 '(highlight ((t (:background "CornflowerBlue"))))
 '(list-mode-item-selected ((t (:background "gold"))))
 '(makefile-space-face ((t (:background "wheat"))))
 '(mode-line ((t (:background "Navy"))))
 '(paren-match ((t (:background "darkseagreen4"))) t)
 '(region ((t (:background "DarkSlateBlue"))))
 '(show-paren-match ((t (:foreground "black" :background "wheat"))))
 '(show-paren-match-face ((t (:foreground "black" :background "wheat"))))
 '(show-paren-mismatch ((((class color)) (:foreground "white" :background "red"))))
 '(show-paren-mismatch-face ((((class color)) (:foreground "white" :background "red"))))
 '(speedbar-button-face ((((class color) (background dark)) (:foreground "green4"))))
 '(speedbar-directory-face ((((class color) (background dark)) (:foreground "khaki"))))
 '(speedbar-file-face ((((class color) (background dark)) (:foreground "cyan"))))
 '(speedbar-tag-face ((((class color) (background dark)) (:foreground "Springgreen"))))
 '(trailing-whitespace ((((class color) (background light)) (:foreground unspecified :strike-through "chartreuse2"))))
 '(vhdl-speedbar-architecture-selected-face ((((class color) (background dark)) (:underline t :foreground "Blue"))))
 '(vhdl-speedbar-entity-face ((((class color) (background dark)) (:foreground "darkGreen"))))
 '(vhdl-speedbar-entity-selected-face ((((class color) (background dark)) (:underline t :foreground "darkGreen"))))
 '(vhdl-speedbar-package-face ((((class color) (background dark)) (:foreground "black"))))
 '(vhdl-speedbar-package-selected-face ((((class color) (background dark)) (:underline t :foreground "black"))))
 '(widget-field ((((class grayscale color) (background light)) (:background "DarkBlue")))))
