# -*- Mode: shell-script; indent-tabs-mode: nil -*-

# In Emacs, use M-x folding.  Quick reference:
#
# Show all sections' text 'C-c @ C-o'
# Hide all sections' text 'C-c @ C-w'
# Show a section's text   'C-c @ C-s'
# Hide a section's text   'C-c @ C-x'

# See also man 1 zshcompctl zshcompsys zshcompwid. zshcompctl is the old
# style of zsh programmable completion, zshcompsys is the new completion
# system, zshcompwid are the zsh completion widgets.

# Some functions, like _apt and _dpkg, are very slow. You can use a
# cache in order to proxy the list of results (like the list of
# available debian packages) Use a cache:

autoload -U compinit
compinit

zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.var/cache/zsh/

# Prevent CVS files/directories from being completed:

zstyle ':completion:*:(all-|)files' ignored-patterns '(|*/)CVS'
zstyle ':completion:*:cd:*' ignored-patterns '(*/)#CVS'

# Fuzzy matching of completions for when you mistype them:

zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# And if you want the number of errors allowed by _approximate to
# increase with the length of what you have typed so far:

zstyle -e ':completion:*:approximate:*' \
        max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'

# Ignore completion functions for commands you don't have:

zstyle ':completion:*:functions' ignored-patterns '_*'

# With helper functions like:

xdvi() { command xdvi ${*:-*.dvi(om[1])} }

# you can avoid having to complete at all in many cases, but if you do,
# you might want to fall into menu selection immediately and to have the
# words sorted by time:

zstyle ':completion:*:*:xdvi:*' menu yes select
zstyle ':completion:*:*:xdvi:*' file-sort time

# Completing process IDs with menu selection:

zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*'   force-list always

# If you end up using a directory as argument, this will remove the
# trailing slash (usefull in ln)

zstyle ':completion:*' squeeze-slashes true

# # cd will never select the parent directory (e.g.: cd ../<TAB>):
#
# zstyle ':completion:*:cd:*' ignore-parents parent pwd

# If an ambiguous completion produces at least <NUM> possibilities, menu
# selection is started. you shouldn't set $MENUSELECT directly (unless
# you are using compctl, which will happily use menu selection).

zstyle ':completion:*' menu select=10

# # Please note
# zstyle ':completion:*' menu  yes select=10
# # or
# zstyle ':completion:*' menu  yes
# # or
# setopt MENU_COMPLETE
# # all three immediately start menu-select
# # without giving chance to other completion.
# # so not selecting it.

# However, if you don't ever want to try old-style completion, you can
# put the following incantation in your .zshrc:

# zstyle ':completion:*' use-compctl false



# Use of $LS_COLORS not only for ls but also tab completion:
zmodload -i zsh/complist &&
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# zstyle ':completion:*' list-colors ''


zmodload -a zsh/stat stat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload -a zsh/mapfile mapfile

# zstyle ':completion:*' completer _complete _list _oldlist _expand _ignored _match _correct _approximate _prefix
# zstyle ':completion:*' completer  _list _oldlist _expand:-glob _expand:-subst _complete _ignored _match _correct _approximate _prefix _menu

zstyle ':completion:*' completer _complete _all_matches _list _oldlist \
                                 _expand _complete:-extended \
                                 _match  _ignored _correct   \
                                 _approximate:-one _prefix
zstyle ':completion:*:complete-extended:*' matcher 'r:|[.,_-]=* r:|=*'
zstyle ':completion:*:approximate-one:*' max-errors 1 numeric
zstyle ':completion:*:expand-glob:*' glob yes
zstyle ':completion:*:expand-subst:*' substitute yes
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
#zstyle ':completion:*' list-colors ''
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*' insert-unambigous true
zstyle ':completion:*' add-space true
zstyle ':completion:*' verbose yes
# # match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select=long-list select=0
zstyle ':completion:*' old-menu false
zstyle ':completion:*' original true
zstyle ':completion:*' substitute 1
zstyle ':completion:*' use-compctl true
zstyle ':completion:*' verbose true
zstyle ':completion:*' word true
# get colour name complition for xsetroot -solid
zstyle ':completion:*:colors' path   /usr/share/X11/rgb.txt

# BUG: TODO: NOT WORKING
# https://github.com/robbyrussell/oh-my-zsh/issues/1563
# https://www.google.com/search?q=zsh%20completion%20with%20colour
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# formatting and messages
# You can use this style if you want to find out where the completions
# in a completion listing come from. The most basic use is to set it for
# the descriptions tag in any completion context. It takes a string
# value in which `%d' should appear; this will be replaced by a
# description of whatever is being completed. For example, I use:

# zstyle ':completion:*:descriptions' format 'Completing %d'
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:processes' command 'command ps -xf -U ${USER}'
zstyle ':completions:*:processes-names' command 'command ps xho command'

# http://zshwiki.org/home/examples/compsys/processes?s=process
# check some more is here.
# zstyle ':completion:*:processes-names' command  'command ps c -u '"${USER}"' -o command | command uniq'

# http://zshwiki.org/home/examples/compsys/colors
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=36=31"
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=$color[cyan]=$color[red]"
zstyle ':completion:*:*:$command:*:$tag'  list-colors "=(#b) =$zshregex_with_brackets =$default_color_escape_number =$color_number_for_letters_in_first_bracket-pair =$color_number_for_letters_in_second_bracket-pair"     '...'





# {{{ zstyle completions

## These next 2 lines are from compinstall.
# zstyle ':completion:*' completer _expand _complete _correct _approximate

## All of the following zstyles are from:
## (http://www.zshwiki.org/cgi-bin/wiki.pl?ZshCompletionTips)

# Allow zsh to complete on hostnames found in common config files.
local _myhosts;                 # beautiful
# _myhosts=( ${${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ }:#\!*}
#            ${=${(f)"$(cat /etc/hosts(|)(N) <<(ypcat hosts 2>/dev/null))"}%%\#*} )

# _myhosts=( ${${=${${(f)"$(cat {/etc/ssh_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ }:#\!*}
#           ${=${(f)"$(cat /etc/hosts(|)(N) <<(ypcat hosts 2>/dev/null))"}%%\#*} )

local _HOST_FILE_TO_USE=~/.config/dnsmasq/dnsmasq.d/data/hosts-manual-priv
if [ ! -e ~/.var/cache/zsh/etc_hosts ] ||
       [[ /etc/hosts -nt ~/.var/cache/zsh/etc_hosts ]] ||
       [[ $_HOST_FILE_TO_USE -nt ~/.var/cache/zsh/etc_hosts ]]
then
    mkdir -p ~/.var/cache/zsh
    if [ -d ~/.var/cache/zsh ]
    then
        echo ${=${(f)"$(cat $_HOST_FILE_TO_USE /etc/hosts(|)(N) <<(ypcat hosts 2>/dev/null))"}%%\#*} > ~/.var/cache/zsh/etc_hosts
    fi
fi
unset _HOST_FILE_TO_USE

_myhosts=( ${${=${${(f)"$(cat /etc/ssh_hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ }:#\!*} )
if [ -r ~/.var/cache/zsh/etc_hosts ]
then
    _myhosts=( $_myhosts $(< ~/.var/cache/zsh/etc_hosts)  )
fi
zstyle ':completion:*' hosts $_myhosts;

## With commands like `rm' it's annoying if one gets offered the same filename
## again even if it is already on the command line. To avoid that:
#
zstyle ':completion:*:rm:*' ignore-line yes

## Load the completion module.
# zstyle :compinstall filename '/home/$LOGNAME/.zshrc'
zstyle :compinstall filename '$HOME/.zshrc'
autoload -U compinit
compinit


## http://www.zsh.org/mla/workers/2003/msg00030.html
# match against surnames and login
#zstyle ':completion:*:email-ldap' filter sn rdn
# getting the whole list results in an 'Administrative limit reached' error
# so skip ldap lookup unless at least two characters have been typed
# zstyle -e ':completion:*:email-ldap' filter '(( $#PREFIX+$#SUFFIX > 2 )) && reply=( sn rdn )'
# zstyle -e ':completion:*:email-ldap' filter '(( $#PREFIX+$#SUFFIX > 2 )) && reply=( sn cn )'
zstyle -e ':completion:*:email-ldap' filter '(( $#PREFIX+$#SUFFIX > 2 )) && reply=( sn name rdn )'
# -x option needed to turn of SASL authentication
# zstyle ':completion:*:email-ldap' command 'ldapsearch -w Hog27Xol -x -LLL $filter cn mail'
# zstyle ':completion:*:email-ldap' command 'ldapsearch -w Hog27Xol -LLL $filter cn mail'
# zstyle ':completion:*:email-ldap' command 'ldapsearch -w Hog27Xol -LLL $filter cn mail | grep -v "^# refldap://"'

zstyle ':completion:*:email-ldap' command 'ldapsearch -w `get-imap-pass.py` -LLL $filter displayName mail | egrep -v "^(# refldap://|dn:)" | grep -v "^\$"'




# zstyle ''


# And, my .ldaprc contains a `HOST host:port' line









################ From Zsh Pony ################

# 8.4 Pick item but stay in the menu

bindkey -M menuselect "+" accept-and-menu-complete
# % ls <tab> +



# 10.5 Remove last part from directory name

slash-backward-kill-word() {
    local WORDCHARS="${WORDCHARS:s@/@}"
    zle backward-kill-word
}
zle -N slash-backward-kill-word
bindkey '\e^?' slash-backward-kill-word
# % cd /usr/share/doc/mutt/examples/<alt+backspace>
# Note: configured by default in grml-zshrc, so ready for usage out-of-the-box.



# 10.8 Zsh Line Editor (AKA zle)

#     It's what readline is for bash (move, delete, copy words/lines/…)
#     Basic layout of custom widgets, used like functions:

# % foobar() { LBUFFER="foobar $LBUFFER"; } # function
# % zle -N foobar         # declare function as bindable widget
# % bindkey '^x^s' foobar # bind command to a keybinding

#     ctrl-x-z provides helpzleparsekeybindings in grml-zshrc


# 10.9 Edit command line in editor

# % autoload edit-command-line && zle -N edit-command-line
# % bindkey '\ee' edit-command-line
# % $SOME_COMMAND_LINE <esc-e>


# 10.10 Insert a timestamp on the command line (yyyy-mm-dd)

# insert-datestamp() { LBUFFER+=${(%):-'%D{%Y-%m-%d}'}; }
# zle -N insert-datestamp
# bindkey '^Ed' insert-datestamp

# 10.11 Insert last typed word

# % insert-last-typed-word() { zle insert-last-word -- 0 -1 };
# % zle -N insert-last-typed-word;
# % bindkey "\em" insert-last-typed-word
# % mv foobar <esc-m>

# 10.12 Complete word from history with menu

# % zle -C hist-complete complete-word _generic
# % zstyle ':completion:hist-complete:*' completer _history
# % bindkey "^X^X" hist-complete



# 13 Get VCS information into your prompt - vcs_info

# autoload -Uz vcs_info
# precmd() {
#   psvar=()
#   vcs_info
#   [[ -n $vcs_info_msg_0_ ]] && psvar[1]="$vcs_info_msg_0_"
# }
# PS1="%m%(1v.%F{green}%1v%f.)%# "



################ From Zsh Pony ################
