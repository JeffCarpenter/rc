# -*- Mode: shell-script; indent-tabs-mode: nil -*-

mkdir -p ~/.logs/stderr/zshall
exec 2> ~/.logs/stderr/zshall/editing

my_extended_wordchars='*?_-+./[]~=&;!#$%^(){}<>:@,\\';



if [ -r ~/.zkbd/$HOST/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE} ]
then
    termzdef=~/.zkbd/$HOST/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}
elif [ -r ~/.zkbd/$HOST/$TERM ]
then
    termzdef=~/.zkbd/$HOST/$TERM
elif [ -r ~/.zkbd/_general/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE} ]
then
    termzdef=~/.zkbd/_general/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}
elif [ -r ~/.zkbd/_general/$TERM ]
then
    termzdef=~/.zkbd/_general/$TERM
elif [ -r ~/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE} ]
then
    termzdef=~/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}
elif [ -r ~/.zkbd/$TERM ]
then
    termzdef=~/.zkbd/$TERM
fi

function bindaykey_if_define() {
    local keycord="$1"
    local keyvalue=${key[$keycord]}
    local keycommand="$2"
    if [ -n "${keyvalue}" ] && [ -n "${keycommand}" ]
    then
        # echo setting up $keycord="$keyvalue" to $keycommand >&2
        bindkey	$keyvalue $keycommand
    else
        echo bindaykey: $keycord not define not setting to $keycommand >&2
    fi
}

function bindaykey_map_if_define() {
    local keycord="$1"
    local keyvalue=${key[$keycord]}
    local keycommand="$2"
    if [ -n "${keyvalue}" ] && [ -n "${keycommand}" ]
    then
        # echo setting up $keycord="$keyvalue" to $keycommand >&2
        bindkey	-M mymap	$keyvalue $keycommand
    else
        echo bindaykey_map:  $keycord not define not setting to $keycommand >&2
    fi
}

function bindaykey_if_define_raw() {
    local keycord="$1"
    local keyvalue=${keycord}
    local keycommand="$2"
    if [ -n "${keyvalue}" ] && [ -n "${keycommand}" ]
    then
        # echo setting up $keycord="$keyvalue" to $keycommand >&2
        bindkey	$keyvalue $keycommand
    else
        echo bindaykey_raw: $keycord not define not setting to $keycommand >&2
    fi
}

function bindaykey_map_if_define_raw() {
    local keycord="$1"
    local keyvalue=${keycord}
    local keycommand="$2"
    if [ -n "${keyvalue}" ] && [ -n "${keycommand}" ]
    then
        # echo setting up $keycord="$keyvalue" to $keycommand >&2
        bindkey	-M mymap	$keyvalue $keycommand
    else
        echo bindaykey_map_raw: $keycord not define not setting to $keycommand >&2
    fi
}

if [ $termzdef -a -r $termzdef  ]
then
    : echo using $termzdef >&2
    source $termzdef
fi

[[ -n ${key[Left]} ]] && bindaykey_if_define "Left" backward-char
[[ -n ${key[Right]} ]] && bindaykey_if_define "Right" forward-char

# is the current position \-quoted ?

function is_quoted(){
 test "${BUFFER[$CURSOR-1,CURSOR-1]}" = "\\"
}

custom_unquote-forward-word(){
    while is_quoted
      do zle .forward-word
    done
}

custom_unquote-backward-word(){
    while  is_quoted
      do zle .backward-word
    done
}

custom_unquote-kill-word(){
    while  is_quoted
      do zle .kill-word
    done
}

custom_unquote-backward-kill-word(){
    while  is_quoted
      do zle .backward-kill-word
    done
}

custom_unquote-backward-delete-word(){
    while  is_quoted
      do zle .backward-delete-word
    done
}

custom_unquote-transpose-words(){
    while is_quoted
      do zle .transpose-words
    done
}

custom_bash-backward-word() {
    local WORDCHARS=${my_extended_wordchars//\.\///}
    zle .backward-word
    custom_unquote-backward-word
}

custom_bash-forward-word() {
    local WORDCHARS=${my_extended_wordchars//\.\///}
    zle .forward-word
    custom_unquote-forward-word
}

custom_bash-kill-word() {
    local WORDCHARS=${my_extended_wordchars//\.\///}
    zle .kill-word
    custom_unquote-kill-word
}

custom_bash-backward-kill-word(){
    local WORDCHARS=${my_extended_wordchars//\.\///}
    zle .backward-kill-word
    custom_unquote-backward-kill-word
}

custom_bash-transpose-words() {
    local WORDCHARS=${my_extended_wordchars//\.\///}
    zle .transpose-words
    custom_unquote-transpose-words
}


backward-to-space() {
    local WORDCHARS=${my_extended_wordchars}
    zle .backward-word
    custom_unquote-backward-word
}

forward-to-space() {
     local WORDCHARS=${my_extended_wordchars}
     zle .forward-word
     custom_unquote-forward-word
}

backward-delete-to-space() {
    local WORDCHARS="${my_extended_wordchars}"
    zle .backward-delete-word
    custom_unquote-backward-delete-word
}


backward-kill-to-space() {
    local WORDCHARS="${my_extended_wordchars}"
    zle .backward-kill-word
    custom_unquote-backward-kill-word
}

backward-to-/ () {
    local WORDCHARS=${my_extended_wordchars//\///}
    zle .backward-word
    custom_unquote-backward-word
}

forward-to-/ () {
    local WORDCHARS=${my_extended_wordchars//\///}
    zle .forward-word
    custom_unquote-forward-word
}

custom_bash-backward-delete-to-sol () {
    local WORDCHARS=${my_extended_wordchars}'| `"'"'"
    zle .backward-delete-word
    custom_unquote-backward-delete-word
}

custom_bash-backward-kill-to-sol () {
    local WORDCHARS=${my_extended_wordchars}'| `"'"'"
    zle .backward-kill-word
    custom_unquote-backward-kill-word
}

accept-line-enable-xtrace () {
    [[ -o no_xtrace ]] && setopt xtrace
    zle .accept-line
}

accept-line-disable-xtrace () {
    [[ -o xtrace ]] && setopt no_xtrace
    zle .accept-line
}

x-set-selection () {
    if [ "$BUFFER" ]
    then
        echo -n $BUFFER | xclip -i
    else
        echo $BUFFER not doing anything
    fi
}

## grml https://github.com/grml/grml-etc-core/blob/master/etc/zsh/zshrc
#f5# Create directory under cursor or the selected area
function inplaceMkDirs () {
    # Press ctrl-xM to create the directory under the cursor or the selected area.
    # To select an area press ctrl-@ or ctrl-space and use the cursor.
    # Use case: you type "mv abc ~/testa/testb/testc/" and remember that the
    # directory does not exist yet -> press ctrl-XM and problem solved
    local PATHTOMKDIR
    if ((REGION_ACTIVE==1)); then
        local F=$MARK T=$CURSOR
        if [[ $F -gt $T ]]; then
            F=${CURSOR}
            T=${MARK}
        fi
        # get marked area from buffer and eliminate whitespace
        PATHTOMKDIR=${BUFFER[F+1,T]%%[[:space:]]##}
        PATHTOMKDIR=${PATHTOMKDIR##[[:space:]]##}
    else
        local bufwords iword
        bufwords=(${(z)LBUFFER})
        iword=${#bufwords}
        bufwords=(${(z)BUFFER})
        PATHTOMKDIR="${(Q)bufwords[iword]}"
    fi
    [[ -z "${PATHTOMKDIR}" ]] && return 1
    PATHTOMKDIR=${~PATHTOMKDIR}
    if [[ -e "${PATHTOMKDIR}" ]]; then
        zle -M " path already exists, doing nothing"
    else
        zle -M "$(mkdir -p -v "${PATHTOMKDIR}")"
        zle end-of-line
    fi
}
## grml https://github.com/grml/grml-etc-core/blob/master/etc/zsh/zshrc

zle	-N	custom_bash-backward-word
zle	-N	custom_bash-forward-word
zle	-N	custom_bash-kill-word
zle	-N	custom_bash-backward-kill-word
zle	-N	custom_bash-transpose-words
zle	-N	custom_bash-backward-delete-to-sol
zle	-N	custom_bash-backward-kill-to-sol

zle	-N	backward-to-space
zle	-N	forward-to-space
zle	-N	backward-delete-to-space
zle	-N	backward-kill-to-space
zle	-N	backward-to-/
zle	-N	forward-to-/
## grml https://github.com/grml/grml-etc-core/blob/master/etc/zsh/zshrc
zle -N inplaceMkDirs
## grml https://github.com/grml/grml-etc-core/blob/master/etc/zsh/zshrc

# games
zle	-N	tetris

zle	-N	accept-line-enable-xtrace
zle	-N	accept-line-disable-xtrace
zle -N  x-set-selection

# create mymap out of emacs map
bindkey	-N	mymap	emacs

# bindkey -M mymap

#bindaykey_map_if_define_raw	'\eb'	custom_bash-backward-word
#bindaykey_map_if_define_raw	'\ef'	custom_bash-forward-word
#bindaykey_map_if_define_raw	'\ed'	custom_bash-kill-word
#bindaykey_map_if_define_raw	'\eD'	custom_bash-kill-word
#bindaykey_map_if_define_raw	'\e'	custom_bash-backward-kill-word
bindaykey_map_if_define_raw		'\e'	backward-kill-word
#bindaykey_map_if_define_raw	'\et'		custom_bash-transpose-words
#bindaykey_map_if_define_raw	'\eT'		custom_bash-transpose-words
#bindaykey_map_if_define_raw	'\C-x'	custom_bash-backward-delete-to-sol
#bindaykey_map_if_define_raw	'\C-x\C-h'	custom_bash-backward-delete-to-sol

# history !!
bindaykey_map_if_define_raw	'\C-xs'	history-incremental-search-forward
bindaykey_map_if_define_raw	'\en'	history-search-forward
bindaykey_map_if_define_raw	'\ep'	history-search-backword
bindaykey_map_if_define_raw	'\C-xp'	history-beginning-search-backward
bindaykey_map_if_define_raw	'\C-xn'	history-beginning-search-forward

# Delete and Kill !!
bindaykey_map_if_define_raw	'\e\C-b'	backward-to-space
bindaykey_map_if_define_raw	'\e\C-f'	forward-to-space
# ensuring it always work in any case.
# bindaykey_map_if_define_raw	'\C-w'		kill-region
bindaykey_map_if_define_raw	'\C-w'		backward-kill-to-space
bindaykey_map_if_define_raw	'\C-xw'		kill-region

bindaykey_map_if_define_raw	'\C-x'	custom_bash-backward-kill-to-sol
bindaykey_map_if_define_raw	'\C-x\C-h'	custom_bash-backward-kill-to-sol
bindaykey_map_if_define_raw	'\e[3~'		delete-char
bindaykey_map_if_define_raw	'\e[3;3~'	delete-word

# Copy
bindaykey_map_if_define_raw	'\ew'	        copy-region-as-kill

bindaykey_map_if_define_raw	'\C-x\e\C-m'	accept-line-enable-xtrace
bindaykey_map_if_define_raw	'\C-x\C-m'	accept-line-disable-xtrace

bindaykey_map_if_define_raw	"\C-x\e'"	x-set-selection

# Move  # used for _most_recent_history widget
# bindaykey_map_if_define_raw	'\e/'	        forward-to-/
# bindaykey_map_if_define_raw	'\e\\'	        backward-to-/

# the convention where the `[' is replaced by an `O' (uppercase letter `O').
# bindaykey_map_if_define_raw	'\e[A'	        up-line-or-history             # up arrow
# bindaykey_map_if_define_raw	'\e[B'	        down-line-or-history           # down arrow
# bindaykey_map_if_define_raw	'\e[C'	        forward-char                   # right arrow
# bindaykey_map_if_define_raw	'\e[D'	        backward-char                  # left arrow
# bindaykey_map_if_define_raw   '\e[5~'		beginning-of-buffer-or-history # page up
# bindaykey_map_if_define_raw   '\e[6~'		end-of-buffer-or-history       # page down


# [[ -n ${key[Up]} ]]         &&  bindaykey_map_if_define   'C-x'$key[Up]         up-line-history
# [[ -n ${key[Down]} ]]       &&  bindaykey_map_if_define   'C-x'$key[Down]       down-line-history
bindaykey_map_if_define	"Up"         up-line-or-history             # up arrow
bindaykey_map_if_define	"Down"       down-line-or-history           # down arrow
bindaykey_map_if_define "Shift-Up"   up-line-or-search              # cursor up
bindaykey_map_if_define "Shift-Down" down-line-or-search            # <ESC>-
bindaykey_map_if_define "Right"      forward-char                   # right arrow
bindaykey_map_if_define	"Left"       backward-char                  # left arrow
bindaykey_map_if_define "PageUp"	   beginning-of-buffer-or-history # page up
bindaykey_map_if_define "PageDown"	 end-of-buffer-or-history       # page down

[ "$key[Control-Left]"  != "$key[Left]" ]  && bindaykey_map_if_define   "Control-Left"  backward-word
[ "$key[Control-Right]" != "$key[Right]" ] && bindaykey_map_if_define   "Control-Right" forward-word
[ "$key[Control-Up]"    != "$key[Up]" ]    && bindaykey_map_if_define   "Control-Up"    up-line-or-search
[ "$key[Control-Down]"  != "$key[Down]" ]  && bindaykey_map_if_define   "Control-Down"  down-line-or-search


# Copy
bindaykey_map_if_define_raw	'\e\C-_'        copy-prev-shell-word
bindaykey_map_if_define_raw	'\e='		copy-prev-word

# Multi-line editing
bindaykey_map_if_define_raw	'\eq'		push-line-or-edit
bindaykey_map_if_define_raw	'\eQ'		push-line-or-edit
bindaykey_map_if_define_raw	'\C-xq'		push-line

# Completion
bindaykey_map_if_define_raw	'\C-i'		complete-word
bindaykey_map_if_define_raw	'\e\C-i'	expand-or-complete



# games
bindaykey_map_if_define_raw	'\e\C-g'	tetris


# describe key
bindaykey_map_if_define_raw	'\C-[k'		describe-key-briefly

## grml https://github.com/grml/grml-etc-core/blob/master/etc/zsh/zshrc
bindaykey_map_if_define_raw '^xM' inplaceMkDirs
## grml https://github.com/grml/grml-etc-core/blob/master/etc/zsh/zshrc


#######################################################3
#if [[ "$TERM" == screen ]] ; then
bindaykey_if_define_raw '\e[1~' beginning-of-line       # home
bindaykey_if_define_raw '\e[4~' end-of-line             # end

bindaykey_if_define_raw '^xp'   history-beginning-search-backward
bindaykey_if_define_raw '^xP'   history-beginning-search-forward
# bindkey -s '^L' "|less\n"             # ctrl-L pipes to less
# bindkey -s '^B' " &\n"                # ctrl-B runs it in the background
# if terminal type is set to 'rxvt':
bindaykey_if_define_raw '\e[7~' beginning-of-line       # home
bindaykey_if_define_raw '\e[8~' end-of-line             # end
#fi


#### TIMESTAMP ####
#### GRML ####
insert-datestamp() { LBUFFER+=${(%):-'%D{'${FTIMESTAMPFMT:-%Y-%m-%d-%H%M}'}'}; }
zle -N insert-datestamp
bindaykey_if_define_raw '^Ed' insert-datestamp
#### GRML ####



# use it
bindkey	-A	mymap	main

# menu
# There is one other additional feature when using menu selection. The
# zle command accept-and-infer-next-history has a different meaning
# here; it accepts a completion, and then tries to complete again using
# menu selection. This is very useful with directory hierarchies, and in
# combination with undo gives you a simple file browser. You need to
# bind it in the special keymap menuselect; for example, I use

bindkey -M menuselect '^o' accept-and-infer-next-history

exec 2> /dev/tty
