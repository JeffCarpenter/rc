# -*- Mode: shell-script; indent-tabs-mode: nil -*-

# My Custom Functions	     #

# set c dir
chome () {
    my_homes=(`\ls -N ~/..`)
    read -s -t 5 -p "`\ls -Nm ~/..`
	dir: " MYHINDX
    export MYHOME=${my_homes[$MYHINDX]}
    unset my_homes MYHINDX
}

if [ $HOME:t = hell ] ; then
    foreach subdir ( ~/../* ) {
        if [ -r $subdir -a -d $subdir ] ; then
            vsubdir=$(basename $subdir | tr '[[:upper:]]' '[[:lower:]]' | tr -d '+')
            eval $vsubdir=$subdir;
            eval : ~"$vsubdir"
        fi
    }
fi

if [ -d ~/SCRATCH ] ; then
    scratch=~/SCRATCH
elif [ -d ~/SCRATCHES/main ] ; then
    scratch=~/SCRATCHES/main
elif [ -d ~/SCRATCHES/small ] ; then
    scratch=~/SCRATCHES/small
fi


if [ $scratch ] ; then
    if [ -d ~/SCRATCH/shortlive/ ] ; then
        short=~/SCRATCH/shortlive ; : ~short
    fi
    if [ -d ~/SCRATCH/internet/download/ ] ; then
        download=~/SCRATCH/internet/download/ ; : ~download
    fi
    : ~scratch
fi


if [ -d ~/Documents/ ] ; then
    doc=~/Documents ; : ~doc
    if [ -d ~/Documents/pdfs/ ] ; then
        pdfs=~/pdfs ; : ~pdfs
    fi
fi


# 	function c () {
# 	    if [ $# -eq 1 ]; then
# 		cd $@ && ls -A -F
# 	    else
# 		cd $MYHOME &&  ls -A -F
# 	    fi
# 	}

# not used now but good concept.
#	getcddb () {
#			echo =================== >> ~/.cddb;
#			du -a	/mnt/cdrom	>>  ~/.cddb ;
#			echo ============================== >> ~/.cddb
#	}

# ad () { for i in ~/.dates/*.lst; do dates $@ $i ; done }

# defining setcursor
function setcursor {

    if [[ $TERM == xterm || $TERM == screen ]] ; then
        :
        	# echo -ne "\033]12;ivory\007"
        	# echo -ne "\033]12;cyan\007"
        	# echo -ne "\033]12;LightCoral\007"
        	# echo -ne "\033]12;Coral\007"
    elif [[ $TERM == screen.linux ]] ; then
                echo -n \\033\[\?17\;0\;60c ;		# for zshell
    elif [[ $TERM == linux ]] ; then
        if [ -r /usr/share/consolefonts/t850b.psf.gz ] ; then
            if which consolechars > /dev/null 2>&1 ; then
                # consolechars -f /usr/share/consolefonts/t850b.psf.gz
            elif which setfont    > /dev/null 2>&1 ; then
                # setfont /usr/share/consolefonts/t850b.psf.gz -u xyz
                # setfont /usr/share/consolefonts/Lat15-Terminus14.psf.gz

            fi
        else
            :
        fi
    fi
}

# defining q
if [ -x /usr/games/fortune ] ; then
    qf () {
	tput clear;
	tput cup 9 0;
	/usr/games/fortune $*;
	tput cup 37 0
	whence setcursor >/dev/null 2>&1 && setcursor

    }
elif which fortune > /dev/null 2>&1 ; then
    qf () {
	tput clear;
	tput cup 9 0;
	fortune $*;
	tput cup 37 0
	whence setcursor >/dev/null 2>&1 && setcursor
    }
else
    qf () {
	tput clear;
	whence setcursor >/dev/null 2>&1 && setcursor
    }
fi

function vacation () {
    if [ $# != 1 ] || [ $1 != "on" -a $1 != "off" ] ; then
        echo "Error not doing any thing" >&2
        cat <<EOF
$0: usage
$0 on|off
EOF
    else
        mutt -s 'vacation '$1' qwe123' sharad.pratap@sasken.com
    fi
}

function suedit () {
    local pathx="$1"
    local filex=`basename $1`
    cp $pathx /tmp/$filex
    emacsclient -d $DISPLAY -n /tmp/$filex
    sudo cp /tmp/$filex $pathx
}

function wiki() { dig +short txt $1.wp.dg.cx; }

function mkcd() { mkdir -p "$@"; eval cd \$$# }

## XML functions

function mkxhtml() {
    curl "$1" | \
        tidy -i -asxml - 2>/dev/null | \
        xmllint - | \
        sed -e 's/&[nm]dash;//g' -e 's|xmlns="http://www.w3.org/1999/xhtml"||'
}

function pstreeo {
    pstree "$@" -p  $(command pgrep -o   '\<'$1'\>')
}

function ldapsearchor () {
    arg=$1
    shift
    objectClass=person
    attrs=("givenName" "cn" "mobile" "sn" "physicalDeliveryOfficeName" "homePhone" "mail" "ipPhone" "mailNickname" "department" "telephoneNumber" "title" "whenCreated")
    if [ "$1" -a "$1" = "all" ] ; then
        ldapsearch    "(&(|(cn=*"${arg}"*)(sn=*"${arg}"*)(givenName=*"${arg}"*))(objectClass="$objectClass"))"| egrep -v '^#|,DC=com'
    else
        ldapsearch    "(&(|(cn=*"${arg}"*)(sn=*"${arg}"*)(givenName=*"${arg}"*))(objectClass="$objectClass"))" $attrs $@ | egrep -v '^#|,DC=com'
    fi
}

DIRLEAVEHOOKFILE=.dirleavehook
DIRENTERHOOKFILE=.direnterhook
function _dir_leave_hook() {
    [ -r ${OLDPWD}/${DIRLEAVEHOOKFILE:-.dirleavehook} ] && source ${OLDPWD}/${DIRLEAVEHOOKFILE:-.dirleavehook}
}
function _dir_enter_hook() {
    [ -r ${PWD}/${DIRENTERHOOKFILE:-.direnterhook} ] && source ${PWD}/${DIRENTERHOOKFILE:-.direnterhook}
}
chpwd_functions=(${chpwd_functions[@]} "_dir_leave_hook")

chpwd_functions=(${chpwd_functions[@]} "_dir_enter_hook")

function scrmkcd () {
    scratchdir=$(mktemp -d -u -p  IIIIIII  --tmpdir=/tmp --suffix=QQQ XXXXXXXXXXXXXXXX)
    [[ -n $rcdebug ]] && echo $scratchdir >&2
    if mkdir -p ${scratchdir} && cd ${scratchdir} ; then
        cat <<EOF > ${DIRLEAVEHOOKFILE:-.dirleavehook}
        if read -q resp"?Should I delete ${scratchdir}: [n] " ; then
         sched -o +60:0 rm -rf ${scratchdir} && echo && echo will removed ${scratchdir} after 1 hour. >&2
        fi
EOF
    fi
}

function backupsshkeys() {
    #from: http://codeblogging.net/blogs/1/16/creating-password-protected-targz-file-command-line
    if (( ${+1} )) ; then
        tar czf - --xform s@${HOME##/}/.osetup/@@g ~/.osetup/{secure/ssh/pubkeys.d,nosecure.d/ssh/keys.d} | openssl enc -aes-256-cbc -e > $1
    else
        echo no file name
    fi
}


function restoresshkeys() {
    #from: http://codeblogging.net/blogs/1/16/creating-password-protected-targz-file-command-line
    if (( $# == 2 )) ; then
        openssl enc -in $1 -aes-256-cbc -d | tar -zxvf - -C $2
    else
        echo no file name
    fi
}

function screenssh {
    if (( $# >= 1 )) ; then
        if (( $# == 2 )) ; then
            machine=$1
            shift
            prefixcmd="ssh $machine"
            prefixcmdintractive="ssh -t $machine"
        fi
        sessionarg=$1
        session=${sessionarg:-default}


        if ssh-add -l > /dev/null  || ssh-add ~/.ssh/login-keys.d/*~*.pub ; then
            if [ "$sessionarg" ] && ! ${=prefixcmd} screen -x $sessionarg -ls | grep 'No Sockets' 1>&2 > /dev/null ; then
                session=$( ${=prefixcmd} screen -x $sessionarg -ls | sed -n 2p | awk '{ print $1 }')
            fi

            if [ "$session" ] ; then
                echo ${=prefixcmdintractive} screen -x $session >&2
                ${=prefixcmdintractive} screen -x $session  ||
                ${=prefixcmdintractive} screen -S $session
            else
                echo No session $sessionarg creating it. >&2
            fi
        else
            echo Not able to set the private in ssh-agent. >&2
        fi
    else
        echo no server name >&2
    fi
}

function lsscreenssh {
    if (( $# == 1 )) ; then
        machine=$1
        shift
        prefixcmdintractive="ssh -t $machine"
    fi

    if ssh-add -l > /dev/null  || ssh-add ~/.ssh/login-keys.d/*~*.pub ; then
        ${=prefixcmdintractive} screen -ls
    else
        echo else
    fi
}

# function zshexit {
# }

function _checkscheduls() {
    command sleep 10s &
}

zshexit_functions=(${chpwd_functions[@]} "_checkscheduls")




function mkrsetupdir () {
    if (( $# == 1 )) ; then
        dir=$1
        mkdir -p ~/.rsetup/$dir/{env,run}.d
        cat > ~/.rsetup/$dir/run <<EOF
#!/bin/zsh
[ -r ~/.rsetup/$dir/run.d/\${HOST} ] && ~/.rsetup/$dir/run.d/\${HOST}
EOF

        cat > ~/.rsetup/$dir/env <<EOF
[ -r ~/.rsetup/$dir/env.d/\${HOST} ] && . ~/.rsetup/$dir/env.d/\${HOST}
EOF
    else
        echo onl one arg required >&2
    fi
}


#{{ Debug.
function standoutmsg () {
    if (( ${+STANDOUTMSGFILE} )) ; then
        print "\n\n\n" sharad: $@ "\n\n\n" >> $STANDOUTMSGFILE
    else
        print STANDOUTMSGFILE is not set to file
    fi
}

STANDOUTMSG_standoutmsgfns=()

function mkstandoutmsg () {
    # print QQQ $@

    local _fundefined _xlmachine _xlfile _xluser singleq doubleq

    set -- $(getopt -n mkstandoutmsg -o n:f:u: -- $@)
    while [ $# -gt 0 ]
    do
        case $1 in
            (-n) eval _xlmachine=$2; shift;;
            (-f) eval _xlfile=$2; shift;;
            (-u) eval _xluser=$2; shift;;
            (--) ;;
            (-*) echo "$0: error - unrecognized option $1" 1>&2; : help; return -1;;
            (*)  break;;
        esac
        shift
    done

    if ! (( ${+_xlfile} )) ; then
        echo bye >&2
        return -1
    fi

    if ! (( ${+_xluser} )) ; then
        echo bye >&2
        return -1
    fi

    singleq="'"
    doubleq='"'

    if [ "${_xlmachine}" ]  ; then
        _fundefined="standoutmsg-${_xlmachine}-$(basename $_xlfile)"
        eval "function ${_fundefined}" \
            '() { ssh ' \
            "${_xlmachine}" \
            $doubleq \
            "  echo -e '\n\n\n'" \
            '$(date +%d%h%Y-%H%M%S)' \
            "${_xluser}:" \
            '$@ ' \
            "'\n\n\n'" \
            ' >>  ' \
            ${_xlfile} \
            $doubleq \
            '}'
    else
        _fundefined="standoutmsg-$(basename $_xlfile)"
        eval "function ${_fundefined}" \
            '() { print "\n\n\n"' \
            '$(date +%d%h%Y-%H%M%S)' \
            "${_xluser}:" \
            '$@ "\n\n\n" >>  ' \
            ${_xlfile} \
            '}'
    fi


    print defined ${_fundefined}

    STANDOUTMSG_standoutmsgfns+=${_fundefined}
}

function STANDOUTMSG_standoutmsgAll () {
    foreach fn (${(u)STANDOUTMSG_standoutmsgfns})
    do
        $fn $@
    done
}

function waitmsg () {
    print Wait $1
    sleep $1
}

#}}


