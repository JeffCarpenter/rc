#+TITLE Org capture plus
#+PROPERTY: header-args :tangle yes :padline yes :comments both :noweb yes

* Property Rank methods for task
** Preamble
#+begin_src emacs-lisp :padline no :comments no :noweb no
;;; occ-property-rank-methods.el --- org capture plus         -*- lexical-binding: t; -*-

;; Copyright (C) 2012  Sharad Pratap

;; Author: Sharad Pratap <sh4r4d _at_ _G-mail_>
;; Keywords: convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

#+end_src

** Provide this file
#+begin_src emacs-lisp
(provide 'occ-property-rank-methods)

#+end_src

** Required libraries
#+begin_src emacs-lisp

  (require 'occ-prop)
  
#+end_src



** Read write properties of task
*** Current File property of task

**** Incorrect Method getting confused with `file' org buffer than current-file property of task
     #+begin_src elisp

       ;;{{ file
       (when nil                               ;rank calculation for org file name in which tsk aka entry not much useful
         (cl-defmethod occ-rankprop-with ((obj occ-tsk)
                                          (ctx occ-ctx)
                                          (prop (eql file)))
          ;; file in which tsk aka org entry exists.
          "Predicate funtion to check if ctx matches to tsk's file attribute."
          (let* ((tsk-currfile (occ-get-property obj 'currfile))
                 (tsk-currfile (if tsk-currfile (file-truename tsk-currfile))))
            (let* ((ctx-file (occ-ctx-file ctx))
                   (ctx-file (when ctx-file (file-truename ctx-file))))
              (if tsk-currfile
                  (progn
                    (occ-debug :nodisplay "tsk %s tsk-currfile %s" (occ-format obj 'capitalize) tsk-currfile)
                    (occ-debug :nodisplay "tsk %s ctx-file %s"     (occ-format obj 'capitalize) ctx-file))
                (occ-debug :nodisplay "tsk %s currfile %s not present."
                           (occ-format obj 'capitalize) tsk-currfile))
              (if (and tsk-currfile ctx-file
                       (string-match tsk-currfile ctx-file))
                  (* 2 (length tsk-currfile))     ;as exact match to file giving double matching points.
                0)))))
       ;;}}
       
     #+end_src

**** Correct Method

     #+begin_src elisp

       ;;{{ currfile
       (cl-defmethod occ-rankprop-with ((obj occ-tsk)
                                        (ctx occ-ctx)
                                        (prop (eql currfile)))
         ;; file in which tsk aka org entry exists.
         "Predicate funtion to check if ctx matches to tsk's file attribute."
         (let* ((tsk-currfile (occ-get-property obj prop))
                (tsk-currfile (if tsk-currfile (file-truename tsk-currfile)))
                (ctx-file (occ-ctx-file ctx))
                (ctx-file (if ctx-file (file-truename ctx-file))))
           (if tsk-currfile
               (progn
                 (occ-debug :nodisplay "tsk %s tsk-currfile %s" (occ-format obj 'capitalize) tsk-currfile)
                 (occ-debug :nodisplay "tsk %s ctx-file %s"     (occ-format obj 'capitalize) ctx-file))
             (occ-debug :nodisplay "tsk %s tsk-currfile %s not present."
                        (occ-format obj 'capitalize) tsk-currfile))
           (if (and tsk-currfile ctx-file
                    (string-match tsk-currfile ctx-file))
               (* 2 (length tsk-currfile))     ;as exact match to files giving double matching points.
             0)))

       (cl-defmethod occ-get-property ((ctx occ-ctx)
                                       (prop (eql currfile)))
         "occ-get-property"
         (occ-message "calling occ-get-property(ctx occ-ctx)")
         (let ((currfile (occ-ctx-file ctx)))
           currfile))

       (cl-defmethod occ-readprop-with ((obj occ-tsk)
                                        (ctx occ-ctx)
                                        (prop (eql currfile)))
         "currfile property for tsk aka org entry"
         (let* ((ctx-currfile (if ctx (occ-ctx-file ctx)))
                (ctx-dir      (when (stringp ctx-currfile)
                                (file-name-directory ctx-currfile)))
                (prompt       (concat (symbol-name prop) ": ")))
           (ido-read-currfile-name prompt ctx-dir ctx-currfile)))

       ;; (occ-get-property (occ-make-ctx-at-point) 'currfile)
       ;;}}
       

     #+end_src

*** Root dir property of task
    #+begin_src elisp

      ;;{{ root
      (cl-defmethod occ-rankprop-with ((obj occ-tsk)
                                       (ctx occ-ctx)
                                       (prop (eql root)))
        "Predicate funtion to check if ctx matches to tsk's file attribute."
        (let* ((tsk-root (occ-get-property obj prop))
               (tsk-root (when tsk-root (file-truename tsk-root)))
               (ctx-file (occ-ctx-file ctx))
               (ctx-file (when ctx-file (file-truename ctx-file))))
          (if tsk-root
              (progn
                (occ-debug :nodisplay "tsk %s tsk-root %s" (occ-format obj 'capitalize) tsk-root)
                (occ-debug :nodisplay "tsk %s ctx-file %s" (occ-format obj 'capitalize) ctx-file))
            (occ-debug :nodisplay "tsk %s tsk-root %s not present."
                       (occ-format obj 'capitalize) tsk-root))
          (if (and tsk-root ctx-file
                   (string-match tsk-root ctx-file))
              (length tsk-root)
            0)))

      (cl-defmethod occ-get-property ((ctx occ-ctx)
                                      (prop (eql root)))
        "occ-get-property"
        (let ((file (occ-ctx-file ctx)))
          (when file (dirname-of-file file))))

      (cl-defmethod occ-readprop-with ((obj occ-tsk)
                                       (ctx occ-ctx)
                                       (prop (eql root)))
        (let* ((ctx-file   (when ctx (occ-ctx-file ctx)))
               (ctx-dir    (when (stringp ctx-file) (file-name-directory ctx-file)))
               (prompt (concat (symbol-name prop) ": ")))
          (ido-read-directory-name prompt ctx-dir ctx-dir)))
      ;;}}
      
    #+end_src

*** Timebeing property of task (not fully implemented) will use for keeping a task clocked in for given time
    #+begin_src elisp

      (cl-defmethod occ-rankprop-with ((obj occ-tsk)
                                       (ctx occ-ctx)
                                       (prop (eql timebeing)))
        (let ((timebeing (occ-get-property obj 'timebeing)))
          (let ((timebeing-time (if timebeing (org-duration-string-to-minutes timebeing) 0))
                (clocked-time   (occ-get-property obj 'clock-sum)))
            (if (and
                 (numberp clocked-time)
                 (numberp timebeing-time)
                 (> timebeing-time clocked-time))
                (- timebeing-time clocked-time)
              0))))
      
    #+end_src

** Read only properties
*** Git branch property of task
    #+begin_src elisp

      ;;{{ git-branch
      (cl-defmethod occ-get-property ((ctx occ-ctx)
                                      (prop (eql git-branch)))
        "occ-get-property"
        (let ((file (occ-ctx-file ctx)))
          file))
      
    #+end_src

*** STATUS property of task
    #+begin_src elisp

      (cl-defmethod occ-rankprop-with ((obj occ-tsk)
                                       (ctx occ-ctx)
                                       (prop (eql status)))
        "Predicate funtion to check if ctx matches to tsk's status attribute."
        (let ((todo-type
               (occ-get-property obj 'todo-type))
              (closed
               (occ-get-property obj 'closed))
              (status
               (occ-get-property obj 'todo-keyword)))
          (if (or
               closed
               (eql todo-type 'done)
               (string-equal status "HOLD"))
              -30 0)))
      
    #+end_src

*** Key property of task for setting arbitrary rank
    #+begin_src elisp

      (cl-defmethod occ-rankprop-with ((obj occ-tsk)
                                       (ctx occ-ctx)
                                       (prop (eql key)))
        "Predicate funtion to check if ctx matches to tsk's file attribute."
        (let* ((key (occ-get-property obj 'KEY)))
          (if key (string-to-number key) 0)))
      
    #+end_src

*** Heading level property of task
    #+begin_src elisp

      (cl-defmethod occ-rankprop-with ((obj occ-tsk)
                                       (ctx occ-ctx)
                                       (prop (eql heading-level)))
        "Predicate funtion to check if ctx matches to tsk's file attribute."
        (let* ((level (occ-get-property obj 'level)))
          (if level level 0)))
      
    #+end_src

*** Current clock status proprty of task (will rank based on task is currently clocking-in or not
    #+begin_src elisp
      (cl-defmethod occ-rankprop-with ((obj occ-tsk)
                                       (ctx occ-ctx)
                                       (prop (eql current-clock)))
        (let* ((tsk-marker (occ-get-property obj 'marker)))
          (if (occ-marker= obj org-clock-marker)
              100
            0)))
      
    #+end_src

** Special properties
*** SubtreeFile property of task
    #+begin_src elisp

      ;;{{ sub-tree
      (cl-defmethod occ-readprop-with ((obj occ-tsk)
                                       (ctx occ-ctx)
                                       (prop (eql subtree)))
        (let ((prompt (concat (symbol-name prop) ": ")))
          (file-relative-name
           (ido-read-file-name ;; org-iread-file-name
            prompt
            default-directory default-directory))))
      ;;}}
      
    #+end_src

** File Ends Here
   #+begin_src elisp
;;; occ-property-rank-methods.el ends here
   #+end_src
