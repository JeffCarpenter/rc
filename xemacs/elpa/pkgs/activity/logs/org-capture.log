
Debugger entered--Lisp error: (wrong-type-argument plistp ((nil (:immediate-finish nil))))
  plist-put(((nil (:immediate-finish nil))) :target (clock))
  org-capture-put(:target (clock))
  org-capture+(entry (clock) "* Reading mail subject: Change in FortiWLC[Rel_8.5.1]: *Branch: Rel_8.5.1 *Developer: Sharad Pratap <spratap@fortin...\nfrom: \"Bikash Poudel (Code Review)\" <dops_admin@fortinet.com>\nto: Gautam Shejwalkar <gshejwalkar@fortinet.com>, Sharad Pratap <spratap@fortinet.com>" (nil (:immediate-finish nil)))
  #f(compiled-function (@@@@ type target template &rest capture-plist) #<bytecode 0x4fea895>)([@ (:proto ([@ (:proto ([@ ...]) :name "Interactive capture" :doc "Interactive capture" :capture-plist ((:immediate-finish nil)) :gen-capture-edit-dest-with-type #f(compiled-function (@@@@ name value) #<bytecode 0x4f5e3f1>))]) :name "org-capture-edit-entry-dest" :type entry :receive #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>))] entry (clock) "* Reading mail subject: Change in FortiWLC[Rel_8.5.1]: *Branch: Rel_8.5.1 *Developer: Sharad Pratap <spratap@fortin...\nfrom: \"Bikash Poudel (Code Review)\" <dops_admin@fortinet.com>\nto: Gautam Shejwalkar <gshejwalkar@fortinet.com>, Sharad Pratap <spratap@fortinet.com>" nil)
  #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>)([@ (:proto ([@ (:proto ([@ ...]) :name "Interactive capture" :doc "Interactive capture" :capture-plist ((:immediate-finish nil)) :gen-capture-edit-dest-with-type #f(compiled-function (@@@@ name value) #<bytecode 0x4f5e3f1>))]) :name "org-capture-edit-entry-dest" :type entry :receive #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>))] (clock) "* Reading mail subject: Change in FortiWLC[Rel_8.5.1]: *Branch: Rel_8.5.1 *Developer: Sharad Pratap <spratap@fortin...\nfrom: \"Bikash Poudel (Code Review)\" <dops_admin@fortinet.com>\nto: Gautam Shejwalkar <gshejwalkar@fortinet.com>, Sharad Pratap <spratap@fortinet.com>")
  apply(#f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>) [@ (:proto ([@ (:proto ([@ ...]) :name "Interactive capture" :doc "Interactive capture" :capture-plist ((:immediate-finish nil)) :gen-capture-edit-dest-with-type #f(compiled-function (@@@@ name value) #<bytecode 0x4f5e3f1>))]) :name "org-capture-edit-entry-dest" :type entry :receive #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>))] ((clock) "* Reading mail subject: Change in FortiWLC[Rel_8.5.1]: *Branch: Rel_8.5.1 *Developer: Sharad Pratap <spratap@fortin...\nfrom: \"Bikash Poudel (Code Review)\" <dops_admin@fortinet.com>\nto: Gautam Shejwalkar <gshejwalkar@fortinet.com>, Sharad Pratap <spratap@fortinet.com>"))
  #f(compiled-function (@@@@ &rest args) "Node send method" #<bytecode 0x12a0d79>)([@ (:proto ([@ (:proto ([@ ...]) :name "org-capture-edit-entry-dest-note" :dests ([@ ...]))]) :_occuredon (23911 31639 270250 145000))] (clock) "* Reading mail subject: Change in FortiWLC[Rel_8.5.1]: *Branch: Rel_8.5.1 *Developer: Sharad Pratap <spratap@fortin...\nfrom: \"Bikash Poudel (Code Review)\" <dops_admin@fortinet.com>\nto: Gautam Shejwalkar <gshejwalkar@fortinet.com>, Sharad Pratap <spratap@fortinet.com>")
  #f(compiled-function (@@@@) "Make mail read event." #<bytecode 0x4fb21b5>)([@ (:proto ([@ (:proto ([@ ...]) :name "event detector class" :doc "Event detector class" :note #f(compiled-function (@@@@) #<bytecode 0x12a0e29>) :gen-mail-read-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fea9cd>) :gen-mail-send-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fb20ed>))]) :name "gnus read mail event" :make-message #f(compiled-function (@@@@) #<bytecode 0x4fb217d>) :make-event #f(compiled-function (@@@@) "Make mail read event." #<bytecode 0x4fb21b5>) :make-event-gnus #f(compiled-function (@@@@) #<bytecode 0x4fb21dd>) :dispatch #f(compiled-function (@@@@) "setting note class" #<bytecode 0x4fb21f9>) :note [@ (:proto ([@ (:proto ... :name "note-base-class" :doc "Note Base Class" :dests nil :send #f(compiled-function (@@@@ &rest args) "Node send method" #<bytecode 0x12a0d79>) :dispatch #f(compiled-function (@@@@) #<bytecode 0x12a0d8d>) :_occuredon ... :gen-org-capture-edit-entry-dest-note #f(compiled-function (@@@@ name) "Generator for org note message" #<bytecode 0x4f82ae1>) :gen-org-uninteractive-log-note #f(compiled-function (@@@@ name marker) "Generator for org note message" #<bytecode 0x4ffcd39>) :gen-dual-org-uninteractive-log-note #f(compiled-function (@@@@ name marker1 marker2) "Generator for dual org note message" #<bytecode 0x4ffcda1>))]) :name "org-capture-edit-entry-dest-note" :dests ([@ (:proto ... :name "org-capture-edit-entry-dest" :type entry :receive #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>))]))])])
  apply(#f(compiled-function (@@@@) "Make mail read event." #<bytecode 0x4fb21b5>) [@ (:proto ([@ (:proto ([@ ...]) :name "event detector class" :doc "Event detector class" :note #f(compiled-function (@@@@) #<bytecode 0x12a0e29>) :gen-mail-read-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fea9cd>) :gen-mail-send-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fb20ed>))]) :name "gnus read mail event" :make-message #f(compiled-function (@@@@) #<bytecode 0x4fb217d>) :make-event #f(compiled-function (@@@@) "Make mail read event." #<bytecode 0x4fb21b5>) :make-event-gnus #f(compiled-function (@@@@) #<bytecode 0x4fb21dd>) :dispatch #f(compiled-function (@@@@) "setting note class" #<bytecode 0x4fb21f9>) :note [@ (:proto ([@ (:proto ... :name "note-base-class" :doc "Note Base Class" :dests nil :send #f(compiled-function (@@@@ &rest args) "Node send method" #<bytecode 0x12a0d79>) :dispatch #f(compiled-function (@@@@) #<bytecode 0x12a0d8d>) :_occuredon ... :gen-org-capture-edit-entry-dest-note #f(compiled-function (@@@@ name) "Generator for org note message" #<bytecode 0x4f82ae1>) :gen-org-uninteractive-log-note #f(compiled-function (@@@@ name marker) "Generator for org note message" #<bytecode 0x4ffcd39>) :gen-dual-org-uninteractive-log-note #f(compiled-function (@@@@ name marker1 marker2) "Generator for dual org note message" #<bytecode 0x4ffcda1>))]) :name "org-capture-edit-entry-dest-note" :dests ([@ (:proto ... :name "org-capture-edit-entry-dest" :type entry :receive #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>))]))])] nil)
  @!([@ (:proto ([@ (:proto ([@ ...]) :name "event detector class" :doc "Event detector class" :note #f(compiled-function (@@@@) #<bytecode 0x12a0e29>) :gen-mail-read-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fea9cd>) :gen-mail-send-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fb20ed>))]) :name "gnus read mail event" :make-message #f(compiled-function (@@@@) #<bytecode 0x4fb217d>) :make-event #f(compiled-function (@@@@) "Make mail read event." #<bytecode 0x4fb21b5>) :make-event-gnus #f(compiled-function (@@@@) #<bytecode 0x4fb21dd>) :dispatch #f(compiled-function (@@@@) "setting note class" #<bytecode 0x4fb21f9>) :note [@ (:proto ([@ (:proto ... :name "note-base-class" :doc "Note Base Class" :dests nil :send #f(compiled-function (@@@@ &rest args) "Node send method" #<bytecode 0x12a0d79>) :dispatch #f(compiled-function (@@@@) #<bytecode 0x12a0d8d>) :_occuredon ... :gen-org-capture-edit-entry-dest-note #f(compiled-function (@@@@ name) "Generator for org note message" #<bytecode 0x4f82ae1>) :gen-org-uninteractive-log-note #f(compiled-function (@@@@ name marker) "Generator for org note message" #<bytecode 0x4ffcd39>) :gen-dual-org-uninteractive-log-note #f(compiled-function (@@@@ name marker1 marker2) "Generator for dual org note message" #<bytecode 0x4ffcda1>))]) :name "org-capture-edit-entry-dest-note" :dests ([@ (:proto ... :name "org-capture-edit-entry-dest" :type entry :receive #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>))]))])] :make-event)
  #f(compiled-function (@@@@) #<bytecode 0x4fb21dd>)([@ (:proto ([@ (:proto ([@ ...]) :name "event detector class" :doc "Event detector class" :note #f(compiled-function (@@@@) #<bytecode 0x12a0e29>) :gen-mail-read-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fea9cd>) :gen-mail-send-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fb20ed>))]) :name "gnus read mail event" :make-message #f(compiled-function (@@@@) #<bytecode 0x4fb217d>) :make-event #f(compiled-function (@@@@) "Make mail read event." #<bytecode 0x4fb21b5>) :make-event-gnus #f(compiled-function (@@@@) #<bytecode 0x4fb21dd>) :dispatch #f(compiled-function (@@@@) "setting note class" #<bytecode 0x4fb21f9>) :note [@ (:proto ([@ (:proto ... :name "note-base-class" :doc "Note Base Class" :dests nil :send #f(compiled-function (@@@@ &rest args) "Node send method" #<bytecode 0x12a0d79>) :dispatch #f(compiled-function (@@@@) #<bytecode 0x12a0d8d>) :_occuredon ... :gen-org-capture-edit-entry-dest-note #f(compiled-function (@@@@ name) "Generator for org note message" #<bytecode 0x4f82ae1>) :gen-org-uninteractive-log-note #f(compiled-function (@@@@ name marker) "Generator for org note message" #<bytecode 0x4ffcd39>) :gen-dual-org-uninteractive-log-note #f(compiled-function (@@@@ name marker1 marker2) "Generator for dual org note message" #<bytecode 0x4ffcda1>))]) :name "org-capture-edit-entry-dest-note" :dests ([@ (:proto ... :name "org-capture-edit-entry-dest" :type entry :receive #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>))]))])])
  apply(#f(compiled-function (@@@@) #<bytecode 0x4fb21dd>) [@ (:proto ([@ (:proto ([@ ...]) :name "event detector class" :doc "Event detector class" :note #f(compiled-function (@@@@) #<bytecode 0x12a0e29>) :gen-mail-read-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fea9cd>) :gen-mail-send-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fb20ed>))]) :name "gnus read mail event" :make-message #f(compiled-function (@@@@) #<bytecode 0x4fb217d>) :make-event #f(compiled-function (@@@@) "Make mail read event." #<bytecode 0x4fb21b5>) :make-event-gnus #f(compiled-function (@@@@) #<bytecode 0x4fb21dd>) :dispatch #f(compiled-function (@@@@) "setting note class" #<bytecode 0x4fb21f9>) :note [@ (:proto ([@ (:proto ... :name "note-base-class" :doc "Note Base Class" :dests nil :send #f(compiled-function (@@@@ &rest args) "Node send method" #<bytecode 0x12a0d79>) :dispatch #f(compiled-function (@@@@) #<bytecode 0x12a0d8d>) :_occuredon ... :gen-org-capture-edit-entry-dest-note #f(compiled-function (@@@@ name) "Generator for org note message" #<bytecode 0x4f82ae1>) :gen-org-uninteractive-log-note #f(compiled-function (@@@@ name marker) "Generator for org note message" #<bytecode 0x4ffcd39>) :gen-dual-org-uninteractive-log-note #f(compiled-function (@@@@ name marker1 marker2) "Generator for dual org note message" #<bytecode 0x4ffcda1>))]) :name "org-capture-edit-entry-dest-note" :dests ([@ (:proto ... :name "org-capture-edit-entry-dest" :type entry :receive #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>))]))])] nil)
  @!([@ (:proto ([@ (:proto ([@ ...]) :name "event detector class" :doc "Event detector class" :note #f(compiled-function (@@@@) #<bytecode 0x12a0e29>) :gen-mail-read-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fea9cd>) :gen-mail-send-event-detector #f(compiled-function (@@@@ name) #<bytecode 0x4fb20ed>))]) :name "gnus read mail event" :make-message #f(compiled-function (@@@@) #<bytecode 0x4fb217d>) :make-event #f(compiled-function (@@@@) "Make mail read event." #<bytecode 0x4fb21b5>) :make-event-gnus #f(compiled-function (@@@@) #<bytecode 0x4fb21dd>) :dispatch #f(compiled-function (@@@@) "setting note class" #<bytecode 0x4fb21f9>) :note [@ (:proto ([@ (:proto ... :name "note-base-class" :doc "Note Base Class" :dests nil :send #f(compiled-function (@@@@ &rest args) "Node send method" #<bytecode 0x12a0d79>) :dispatch #f(compiled-function (@@@@) #<bytecode 0x12a0d8d>) :_occuredon ... :gen-org-capture-edit-entry-dest-note #f(compiled-function (@@@@ name) "Generator for org note message" #<bytecode 0x4f82ae1>) :gen-org-uninteractive-log-note #f(compiled-function (@@@@ name marker) "Generator for org note message" #<bytecode 0x4ffcd39>) :gen-dual-org-uninteractive-log-note #f(compiled-function (@@@@ name marker1 marker2) "Generator for dual org note message" #<bytecode 0x4ffcda1>))]) :name "org-capture-edit-entry-dest-note" :dests ([@ (:proto ... :name "org-capture-edit-entry-dest" :type entry :receive #f(compiled-function (@@@@ target template &rest capture-plist) #<bytecode 0x4fea8d1>))]))])] :make-event-gnus)
  mail-event-run-action()
  run-hooks(gnus-article-prepare-hook)
  apply(run-hooks gnus-article-prepare-hook)
  gnus-run-hooks(gnus-article-prepare-hook)
  gnus-article-prepare(102 nil)
  gnus-summary-display-article(102)
  gnus-summary-next-article(nil)
  funcall-interactively(gnus-summary-next-article nil)
  call-interactively(gnus-summary-next-article nil nil)
  command-execute(gnus-summary-next-article)
