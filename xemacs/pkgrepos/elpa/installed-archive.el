((yasnippet-bundle . [(0 6 1) nil "Yet another snippet extension (Auto compiled bundle)"]) (xtide . [(16) nil "XTide display in Emacs"]) (xml-rpc . [(1 6 8) nil "An elisp implementation of clientside XML-RPC"]) (xml-gen . [(0 4) nil "A DSL for generating XML."]) (wtf . [(2 0) nil "Look up conversational and computing acronyms"]) (writegood-mode . [(1 2) nil "Polish up poor writing on the fly"]) (wrap-region . [(0 6 0) nil "Wrap text with punctation or tag"]) (workspaces . [(0 1) nil "Workspaces for Emacsen "]) (workgroups . [(0 2 0) nil "workgroups for windows (for Emacs)"]) (windsize . [(0 1) nil "Simple, intuitive window resizing"]) (windresize . [(0 1) nil "Resize windows interactively"]) (window-number . [(1 0 1) nil "Jump to a window by number"]) (win-switch . [(1 0 5) nil "fast, dynamic bindings for window-switching/resizing"]) (wikidoc . [(0 8 1) nil "use elisp doc strings to make other documentation"]) (wiki-nav . [(0 11) ((button-lock (0 8))) "simple file navigation using [[WikiStrings]]"]) (wgrep . [(2 0 0) nil "Writable grep buffer and apply the changes to files"]) (web . [(0 1 11) nil "A useful HTTP client."]) (unbound . [(0 1) nil "find convenient unbound keystrokes"]) (twittering-mode . [(2 0 0) nil "Major mode for Twitter"]) (twilight-theme . [(1 0 0) nil "Twilight theme for GNU Emacs 24 (deftheme)"]) (tron-theme . [(11) nil "A theme loosely based on Tron: Legacy colors"]) (tidy . [(2 12) nil "Interface to the HTML Tidy program"]) (thesaurus . [(2012 4 7) nil "replace a word with a synonym looked up in a web service."]) (tabulated-list . [(0) nil "generic major mode for tabulated lists."]) (synonyms . [(1 0) nil "Look up synonyms for a word or phrase in a thesaurus."]) (smex . [(1 1 2) nil "M-x interface with Ido-style fuzzy matching."]) (slime-repl . [(20100404) ((slime (20100404))) "Read-Eval-Print Loop written in Emacs Lisp"]) (slime-js . [(0 0 1) ((slime-repl (20100404)) (slime (20100404))) "Slime extension for swank-js."]) (slime . [(20100404 1) nil "Superior Lisp Interaction Mode for Emacs"]) (simp . [(0 1 1) nil "Simple project defenition, chiefly for project file finding and grepping."]) (shell-here . [(1 1) nil "Open a shell relative to the working directory"]) (session . [(2 2 1) nil "use variables, registers and buffer places across sessions"]) (sentence-highlight . [(0 1) nil "highlight the current sentence"]) (scratch . [(20110708) nil "Mode-specific scratch buffers"]) (scpaste . [(0 6) ((htmlize (1 39))) "Paste to the web via scp."]) (sauron . [(0 8) nil "Track (erc/org/dbus/...) events and react to them."]) (ruby-mode . [(1 1) nil "Major mode for editing Ruby files"]) (ruby-compilation . [(0 8) ((ruby-mode (1 1)) (inf-ruby (2 2 1))) "run a ruby process in a compilation buffer"]) (redo+ . [(1 15) nil "Redo/undo system for Emacs"]) (quickrun . [(1 1) nil "Run commands quickly"]) (projectile . [(0 7) nil "Manage and navigate projects in Emacs easily"]) (project-mode . [(1 0) ((levenshtein (1 0))) "Define code projects. Full-text search, etc."]) (project-local-variables . [(0 2) nil "set project-local variables from a file"]) (project . [(1 0) nil "Keep track of the current project"]) (pretty-lambdada . [(22 0) nil "Show the word `lambda' as the Greek letter."]) (pp-c-l . [(1 0) nil "Display Control-l characters in a pretty way"]) (popwin . [(0 4) nil "Popup Window Manager."]) (popup . [(0 5) nil "Visual Popup User Interface"]) (perspective . [(1 7) nil "switch between named \"perspectives\" of the editor"]) (pcache . [(0 2 3) ((eieio (1 3))) "persistent caching for Emacs"]) (pastebin . [(0 1) nil "A simple interface to the www.pastebin.com webservice"]) (parenface . [(1 1) nil "Provide a face for parens in lisp modes."]) (paredit . [(22) nil "minor mode for editing parentheses  -*- Mode: Emacs-Lisp -*-"]) (otp . [(1 0) nil "a one-time password creator"]) (org-outlook . [(0 3) nil "Outlook org"]) (org-mime . [(20120112) nil "org html export for text/html MIME emails"]) (org-email . [(0 6) nil "use org for an email database -*- lexical-binding: t -*-"]) (oddmuse . [(20090222) nil "edit pages on an Oddmuse wiki"]) (notify . [(2010 8 20) nil "notification front-end"]) (no-easy-keys . [(1 0 2) nil "Learn the proper Emacs movement keys"]) (nginx-mode . [(1 1) nil "major mode for editing nginx config files"]) (multiple-cursors . [(1 1 0) nil "Multiple cursors for Emacs."]) (multi-project . [(0 0 8) nil "Easily work with multiple projects."]) (move-text . [(1 0) nil "Move current line or region with M-up or M-down."]) (mongo-elnode . [(0 5 0) ((mongo (0 5)) (elnode (0 9 9))) "elnode adapter for mongo-el"]) (mongo . [(0 5) nil "A MongoDB client."]) (modeline-posn . [(22 0) nil "Set up `mode-line-position'."]) (mldonkey . [(0 0 4) nil "Multi-networks peer-to-peer client."]) (minimap . [(1 0) nil "Sidebar showing a \"mini-map\" of a buffer"]) (mic-paren . [(3 8) nil "advanced highlighting of matching parentheses"]) (memory-usage . [(0 1) nil "Analyze the memory usage of Emacs in various ways"]) (member-function . [(0 3 1) nil "expand member functions for C++ classes"]) (mediawiki . [(2 2 3) nil "mediawiki frontend"]) (markdown-mode . [(1 8 1) nil "Emacs Major mode for Markdown-formatted text files"]) (markchars . [(0 2 0) nil "Mark chars fitting certain characteristics"]) (mark-multiple . [(1 0) nil "A library that sorta lets you mark several regions at once"]) (mark-more-like-this . [(1 0) nil "Mark additional regions in buffer matching current region."]) (makefile-runner . [(1 0 1) nil "Searches for Makefile and fetches targets"]) (macrostep . [(0 2) nil "interactive macro stepper for Emacs Lisp"]) (lusty-explorer . [(2 4) nil "Dynamic filesystem explorer and buffer switcher"]) (lolcode-mode . [(0 2) nil "Major mode for editing LOLCODE"]) (logito . [(0 1) ((eieio (1 3))) "logging library for Emacs"]) (loccur . [(1 1 1) nil "Perform an occur-like folding in current buffer"]) (lmc . [(1 0) nil "Little Man Computer in Elisp"]) (list-utils . [(0 1 2) nil "List-manipulation utility functions"]) (lisppaste . [(1 8) ((xml-rpc (1 6 7))) "Interact with the lisppaste pastebot via XML-RPC."]) (lisp-editing . [(0 0 2) nil "lisp editing tools"]) (light-symbol . [(0 1) nil "Minor mode to highlight symbol under point"]) (lib-requires . [(21 0) nil "Commands to list Emacs Lisp library dependencies."]) (levenshtein . [(1 0) nil "Edit distance between two strings."]) (legalese . [(20120706) nil "Add legalese to your program files"]) (langtool . [(1 1 2) nil "Grammer check utility using LanguageTool"]) (lambdacalc . [(1 0) nil "Interpret lambda calculus expressions"]) (lacarte . [(22 0) nil "Execute menu items as commands, with completion."]) (kv . [(0 0 6) nil "key/value data structure functions"]) (kill-ring-search . [(1 1) nil "incremental search for the kill ring"]) (keywiz . [(1 4) nil "Emacs key sequence quiz"]) (keyfreq . [(0 0 3) ((json (1 2))) "track command frequencies"]) (key-combo . [(1 5 1) nil "map key sequence to commands"]) (key-chord . [(0 5 20080915) nil "map pairs of simultaneously pressed keys to commands"]) (key-choices . [(0 201) ((color-theme-vim-insert-mode (0 1)) (color-theme-emacs-revert-theme (0 1))) "Key Choices -- Also Viper has different colors in different modes"]) (jump-char . [(0 1) nil "navigation by char"]) (jump . [(2 1) ((findr (0 7)) (inflections (1 0))) "build functions which contextually jump between files"]) (jtags-extras . [(0 3 0) nil "jtags related functionality for Java development"]) (jtags . [(0 97) nil "enhanced tags functionality for Java development"]) (json . [(1 2) nil "JavaScript Object Notation parser / generator"]) (jira . [(0 3 3) nil "Connect to JIRA issue tracking software"]) (jimb-patch . [(1 5) nil "clean a patch for submission via email"]) (javap-mode . [(9) nil "Javap major mode"]) (jaunte . [(0 0 0) nil "Emacs Hit a Hint"]) (isearch+ . [(21 0) nil "Extensions to `isearch.el'."]) (ioccur . [(2 4) nil "Incremental occur"]) (inflections . [(1 0) nil "convert english words between singular and plural"]) (inf-ruby . [(2 2 3) nil "Run a ruby process in a buffer"]) (imgur . [(0 1) ((anything (1 287))) "imgur client for Emacs"]) (igrep . [(2 113) nil "An improved interface to `grep` and `find`"]) (ignoramus . [(0 5 0) nil "Ignore backups, build files, et al."]) (idomenu . [(0 1) nil "imenu tag selection with ido"]) (ibuffer-vc . [(0 4) nil "Group ibuffer's list by VC project, or show VC status"]) (htmlize . [(1 39) nil "Convert buffer text and decorations to HTML."]) (html-script-src . [(0 0 2) nil "Insert <script src=\"..\"> for popular JavaScript libraries"]) (header2 . [(21 0) nil "Support for creation and update of file headers."]) (haste . [(1) ((json (1 2))) "Emacs client for hastebin (http://hastebin.com/about.md)"]) (handlebars-mode . [(1 3) nil "A major mode for editing Handlebars files."]) (haml-mode . [(3 0 14) nil "Major mode for editing Haml files"]) (guru-mode . [(0 1) nil "Become an Emacs guru"]) (guess-style . [(0 1) nil "automatic setting of code style variables"]) (guess-offset . [(0 1 1) nil "Automatically determine c-basic-offset"]) (gnusnotes . [(0 9 2) nil "Adding per-message notes in gnus summary buffer"]) (github-theme . [(0 0 3) nil "Github color theme for GNU Emacs 24"]) (git-commit . [(0 1) nil "Major mode for editing git commit messages"]) (git-auto-commit-mode . [(4 1) nil "Emacs Minor mode to automatically commit and push"]) (gist . [(1 0 2) ((eieio (1 3)) (gh (0 5 3)) (tabulated-list (0))) "Emacs integration for gist.github.com"]) (gh . [(0 5 3) ((eieio (1 3)) (pcache (0 2 3)) (logito (0 1))) "A GitHub library for Emacs"]) (geben . [(0 26) nil "A remote debugging environment for Emacs."]) (gdb-shell . [(0 4) nil "minor mode to add gdb features to shell"]) (fuzzy-match . [(1 4) nil "fuzzy matching"]) (fuzzy . [(0 1) nil "Fuzzy Matching"]) (fold-dwim-org . [(0 2) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes."]) (fold-dwim . [(1 2) nil "Unified user interface for Emacs folding modes"]) (flymake-jslint . [(0 6) nil "Flymake support for javascript using jslint"]) (flymake-jshint . [(1 0) nil "making flymake work with JSHint"]) (flymake . [(0 4 11) nil "a universal on-the-fly syntax checker"]) (findr . [(0 7) nil "Breadth-first file-finding facility for (X)Emacs"]) (find-things-fast . [(20111123) nil "An emacs mode to find things fast and move around in a project quickly"]) (find-file-in-project . [(3 2) nil "Find files in a project quickly."]) (find-file-in-git-repo . [(0 1 2) nil "Utility to find files in a git repo"]) (fastnav . [(1 0 7) nil "Fast navigation and editing routines."]) (fakir . [(0 0 14) nil "fakeing bits of Emacs -*- lexical-binding: t -*-"]) (evernote-mode . [(0 41) nil "Evernote client for Emacs"]) (ess-smart-underscore . [(0 73) nil "Ess Smart Underscore"]) (erefactor . [(0 5 4) nil "Emacs-Lisp refactoring utilities"]) (eproject . [(0 4) nil "project workspaces for emacs"]) (epoch-view . [(0 0 1) nil "Minor mode to visualize epoch timestamps"]) (epc . [(0 1 0) ((concurrent (0 3 1)) (ctable (0 1 0))) "A RPC stack for the Emacs Lisp"]) (enclose . [(0 0 2) nil "Enclose cursor within punctuation pairs"]) (elnode . [(0 9 9 5) ((web (0 1 4)) (kv (0 0 2)) (fakir (0 0 14)) (creole (0 8 14))) "A simple event handling HTTP server."]) (elisp-slime-nav . [(0 2) nil "Make M-. and M-, work in elisp like they do in slime"]) (el-autoyas . [(0 20) nil "Automatically create Emacs-Lisp Yasnippets"]) (eieio . [(1 4) nil "Enhanced Implememntation of Emacs Interpreted Objects"]) (ediprolog . [(1 0) nil "Emacs Does Interactive Prolog"]) (ecb_snap . [(20110605) nil "Emacs Code Browser CVS snapshot"]) (ecb . [(2 40) nil "Emacs Code Browser"]) (dsvn . [(922257) nil "Subversion interface"]) (dropdown-list . [(1 45) nil "Drop-down menu interface"]) (drag-stuff . [(0 0 4) nil "Drag stuff (lines, words, region, etc...) around"]) (dpaste . [(0 2) nil "Emacs integration for dpaste.com"]) (doc-mode . [(0 2) nil "convenient editing of in-code documentation"]) (dizzee . [(0 1 1) nil "A more pleasant way to manage your project's subprocesses in Emacs."]) (dired-single . [(1 7 0) nil "reuse the current dired buffer to visit another directory"]) (dired-details . [(1 3 1) nil "make file details hide-able in dired"]) (dired-details+ . [(1 0) nil "Enhancements to library `dired-details+.el'."]) (dired+ . [(21 2) nil "Extensions to Dired."]) (diminish . [(0 44) nil "Diminished modes are minor modes with no modeline display"]) (desktop . [(0 1) nil "save partial status of Emacs when killed"]) (descbinds-anything . [(1 5) ((anything (1 287))) "Yet Another `describe-bindings' with `anything'."]) (deft . [(0 3) nil "quickly browse, filter, and edit plain text notes"]) (deferred . [(0 3 1) nil "Simple asynchronous functions for emacs lisp"]) (defaultcontent . [(1 4) nil "a templating tool. Fill new files with default content."]) (dedicated . [(1 0 0) nil "A very simple minor mode for dedicated buffers"]) (debbugs . [(0 3) nil "SOAP library to access debbugs servers"]) (cycbuf . [(0 5 0) nil "Cycle buffers code by Martin Pohlack, inspired by"]) (cursor-chg . [(20 1) nil "Change cursor dynamically, depending on the context."]) (ctable . [(0 1 0) nil "Table component for Emacs Lisp"]) (crontab-mode . [(1 2) nil "Mode for editing crontab files"]) (creole . [(0 8 14) nil "A parser for the Creole Wiki language"]) (concurrent . [(0 3 1) ((deferred (0 3 1))) "Concurrent utility functions for emacs lisp"]) (company . [(0 5) nil "extensible inline text completion mechanism"]) (command-frequency . [(1 1) nil "Track command frequencies"]) (columnify . [(1 0) nil "arrange lines into columns"]) (color-theme-vim-insert-mode . [(0 1) nil "Color theme VIM insert mode"]) (color-theme-emacs-revert-theme . [(0 1) nil "Color-theme revert to emacs colors"]) (cdlatex . [(4 0) nil "Fast input methods for LaTeX environments and math"]) (cacoo . [(2 1 2) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com"]) (cache . [(0 1) nil "implementation of a hash table whose key-value pairs expire"]) (c-eldoc . [(0 6) nil "helpful description of the arguments to C functions"]) (button-lock . [(0 81) nil "clickable text defined by regular expression, controlled by font-lock"]) (buffer-move . [(0 4) nil "swap buffers between windows"]) (browse-kill-ring . [(1 3 1) nil "interactively insert items from kill-ring -*- coding: utf-8 -*-"]) (bookmark+ . [(20111214) nil "Bookmark Plus"]) (bm . [(1 53) nil "Visible bookmarks in buffer."]) (bitlbee . [(1 0) nil "Help get Bitlbee (http://www.bitlbee.org) up and running"]) (ascii . [(3 1) nil "ASCII code display."]) (apache-mode . [(2 0) nil "major mode for editing Apache configuration files"]) (anything-show-completion . [(20091119) nil "Show selection in buffer for anything completion"]) (anything-obsolete . [(0 1) nil "obsolete functions of anything"]) (anything-match-plugin . [(1 27) nil "Humane match plug-in for anything"]) (anything-ipython . [(0 1 2009) nil " Ipython anything"]) (anything-git-goto . [(0 1 0) nil "Quick listing of:"]) (anything-exuberant-ctags . [(0 1 2) nil "Exuberant ctags anything.el interface"]) (anything-extension . [(0 2) nil "Extension functions for anything.el"]) (anything-el-swank-fuzzy . [(0 1 2009) nil "anything-sources for el-swank-fuzzy.el"]) (anything-config . [(0 4 1) nil "Predefined configurations for `anything.el'"]) (anything-complete . [(1 86) nil "completion with anything"]) (anything . [(1 287) nil "open anything / QuickSilver-like candidate-selection framework"]) (ampc . [(0 1 3) nil "Asynchronous Music Player Controller"]) (alpha . [(1 0) nil "increase frame transparency"]) (all . [(1 0) nil "Edit all lines matching a given regexp"]) (ace-jump-mode . [(1 0) nil "a quick cursor location minor mode for emacs"]) (ac-slime . [(0 2) nil "An auto-complete source using slime completions"]) (Save-visited-files . [(1 2) nil "save opened files across sessions"]))