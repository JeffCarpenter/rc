[user]
	name = Sharad Pratap
	email = sh4r4d@gmail.com
[github]
	name = Sharad
	token = c5b94a1dfb834edb16654290b4bf0c0d

# http://stackoverflow.com/questions/1817370/ediff-as-mergetool
[mergetool.ediff]
    cmd = emacsclient -f ~/.emacs.d/server/general -d :0.0 \
                      --eval "\"(progn \
  (setq ;; ediff-quit-hook 'kill-emacs \
        ediff-quit-merge-hook 'ediff-write-merge-buffer) \
  (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \
                                   \\\"$BASE\\\" nil \\\"$MERGED\\\"))\""

[mergetool.edifflaunch]
    cmd = ~/bin/edifflaunch


[mergetool.ediff1]
    cmd = emacsclient -f ~/.emacs.d/server/general -d :0.0 \
                      --eval    \"(git-mergetool-emacsclient-ediff \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" \\\"$MERGED\\\")\"


[mergetool.test]
        cmd = echo LOCAL $LOCAL REMOTE $REMOTE BASE $BASE MERGED $MERGED



# [merge]
# 	tool = [tool]



  # (defun ediff-write-merge-buffer () \
  #   (let ((file ediff-merge-store-file)) \
  #     (set-buffer ediff-buffer-C) \
  #     (write-region (point-min) (point-max) file) \
  #     (message \\\"Merge buffer saved in: %s\\\" file) \
  #     (set-buffer-modified-p nil) \
  #     (sit-for 1))) \
[push]
	default = simple
[color]
	ui = auto

[alias]
  # sync = !git checkout ${2:-master} && git pull --rebase origin ${2:-master} && git checkout ${1:- -} && git rebase ${2:-master}
	wdiff = diff -b -w --ignore-space-at-eol --ignore-blank-lines
	wapply = apply --ignore-whitespace
	# https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged?noredirect=1&lq=1
	sweep = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"
	# sweep = "!echo grep  -v '\\*|master|develop'"
	# sweep = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 echo"


# from https://gist.github.com/robmiller/6018582
#
# Working with branches
#

# Get the current branch name (not so useful in itself, but used in
# other aliases)
branch-name = "!git rev-parse --abbrev-ref HEAD"
# Push the current branch to the remote "origin", and set it to track
# the upstream branch
publish = "!git push -u origin $(git branch-name)"
# Delete the remote version of the current branch
unpublish = "!git push origin :$(git branch-name)"
# Delete a branch and recreate it from master â€” useful if you have, say,
# a development branch and a master branch and they could conceivably go
# out of sync
recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

# Fire up your difftool (e.g. Kaleidescope) with all the changes that
# are on the current branch.
code-review = difftool origin/master...

# Given a merge commit, find the span of commits that exist(ed) on that
# branch. Again, not so useful in itself, but used by other aliases.
merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

# Find the commits that were introduced by a merge
merge-log = "!git log `git merge-span .. $1`"
# Show the changes that were introduced by a merge
merge-diff = "!git diff `git merge-span ... $1`"
# As above, but in your difftool
merge-difftool = "!git difftool `git merge-span ... $1`"

# Interactively rebase all the commits on the current branch
rebase-branch = "!git rebase -i `git merge-base master HEAD`"

#
# Working with files
#

# Unstage any files that have been added to the staging area
unstage = reset HEAD
# Show changes that have been staged
diffc = diff --cached

# Mark a file as "assume unchanged", which means that Git will treat it
# as though there are no changes to it even if there are. Useful for
# temporary changes to tracked files
assume = update-index --assume-unchanged
# Reverse the above
unassume = update-index --no-assume-unchanged
# Show the files that are currently assume-unchanged
assumed = "!git ls-files -v | grep ^h | cut -c 3-"

# Checkout our version of a file and add it
ours = "!f() { git checkout --ours $@ && git add $@; }; f"
# Checkout their version of a file and add it
theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

# Delete any branches that have been merged into master
# See also: https://gist.github.com/robmiller/5133264
delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

# from https://gist.github.com/robmiller/6018582



[branch]
	autosetupmerge = true
[magithub]
	online = false
[magithub "status"]
	includeStatusHeader = false
	includePullRequestsSection = false
	includeIssuesSection = false
