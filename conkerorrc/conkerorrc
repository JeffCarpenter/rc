//_* Conkeror initialisation
//(eev-index-create)
///«INDEX»
// «.BINDINGS»            (to "BINDINGS")
// «.COMMANDS»            (to "COMMANDS")
// «.CSS»                 (to "CSS")
// «.FUNCTIONS»           (to "FUNCTIONS")
// «.MISC»                (to "MISC")
// «.MODULES»             (to "MODULES")
// «.MOUSE»               (to "MOUSE")
// «.MOZREPL»             (to "MOZREPL")
// «.WEBJUMPS»            (to "WEBJUMPS")
// «.fileLocalVariables»  (to "fileLocalVariables")
// «.jQuery integration»  (to "jQuery integration")
// ==INDEX-END== (Don't delete this line!)

//_* ADD-ONS
define_variable("firebug_url",
    "http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js");

function firebug (I) {
    var doc = I.buffer.document;
    var script = doc.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', firebug_url);
    script.setAttribute('onload', 'firebug.init();');
    doc.body.appendChild(script);
}
interactive("firebug", "Open firebug lite", firebug);


//_* «BINDINGS» (to ".BINDINGS")
undefine_key(content_buffer_normal_keymap, "C-n");
undefine_key(content_buffer_normal_keymap, "C-p");
undefine_key(content_buffer_normal_keymap, "b");
undefine_key(content_buffer_normal_keymap, "d");
undefine_key(content_buffer_normal_keymap, "F");
undefine_key(content_buffer_normal_keymap, "g");
undefine_key(content_buffer_normal_keymap, "G");
undefine_key(content_buffer_normal_keymap, "u");
undefine_key(download_buffer_keymap, "d");
undefine_key(download_buffer_keymap, "p");
undefine_key(download_buffer_keymap, "o");
define_key(content_buffer_normal_keymap, "tab", null, $fallthrough);
define_key(content_buffer_normal_keymap, "S-tab", null, $fallthrough);

define_key(download_buffer_keymap, "space", "download-pause-or-resume");
define_key(download_buffer_keymap, "C-c", "download-cancel");
define_key(download_buffer_keymap, "t", "find-url-new-buffer");
define_key(download_buffer_keymap, "P", "paste-url-new-buffer");

define_key(content_buffer_normal_keymap, "L", "forward");
define_key(content_buffer_normal_keymap, "H", "back");
define_key(content_buffer_normal_keymap, "g u", "up");
define_key(content_buffer_normal_keymap, "g U", "root"); // FIXME

define_key(content_buffer_normal_keymap, "o", "find-url");
define_key(content_buffer_normal_keymap, "O", "find-alternate-url");
define_key(content_buffer_normal_keymap, "t", "find-url-new-buffer");
define_key(content_buffer_normal_keymap, "T", "find-alternate-url-new-buffer");
// FIXME
// [[gnus:gmane.comp.mozilla.conkeror#20100531163840.GA3463@hecubus][Email from John J. Foerch: Re: Bind key to other key]]
// require("global-overlay-keymap");
// define_key_alias("j", "down");
// define_key_alias("k", "up");
define_key(content_buffer_normal_keymap, "h", "cmd_scrollLeft");
define_key(content_buffer_normal_keymap, "l", "cmd_scrollRight");
define_key(content_buffer_normal_keymap, "g g", "cmd_scrollTop");
define_key(content_buffer_normal_keymap, "G", "cmd_scrollBottom");
define_key(content_buffer_normal_keymap, "0", "cmd_scrollBeginLine");
define_key(content_buffer_normal_keymap, "$", "cmd_scrollEndLine");

define_key(content_buffer_normal_keymap, "n", "isearch-continue-forward");
define_key(content_buffer_normal_keymap, "N", "isearch-continue-backward");

define_key(content_buffer_normal_keymap, "C-d", "delete");
define_key(content_buffer_normal_keymap, "* x", "browser-object-text");
define_key(content_buffer_normal_keymap, "a", "browser-object-links");
define_key(content_buffer_normal_keymap, "F", "follow-top");

define_key(content_buffer_normal_keymap, "p", "paste-url");
define_key(content_buffer_normal_keymap, "P", "paste-url-new-buffer");
define_key(content_buffer_normal_keymap, "y", "copy-current-url");

define_key(content_buffer_normal_keymap, "I", "toggle-images");
define_key(content_buffer_normal_keymap, "C-c", "stop-loading");
define_key(content_buffer_normal_keymap, "C-[", "unfocus");
define_key(content_buffer_normal_keymap, "M-tab", "browser-focus-next-form-field");
define_key(content_buffer_normal_keymap, "M-S-tab", "browser-focus-previous-form-field");

define_key(content_buffer_normal_keymap, "C-v", "quote-next-input-mode");
define_key(content_buffer_normal_keymap, "C-M-v", "quote-mode");

define_key(default_global_keymap, "C-n", "buffer-next");
define_key(default_global_keymap, "C-p", "buffer-previous");
define_key(default_global_keymap, "k", "cmd_scrollLineUp");
define_key(default_global_keymap, "j", "cmd_scrollLineDown");
define_key(default_global_keymap, "d", "kill-current-buffer");
//define_key(default_global_keymap, "u", "undo-kill-buffer");
define_key(default_global_keymap, "/", "isearch-forward");
define_key(default_global_keymap, "?", "isearch-backward");
define_key(default_global_keymap, "b", "switch-to-buffer");
define_key(default_global_keymap, ":", "execute-extended-command");

define_key(content_buffer_normal_keymap, "M-n", "duplicate-buffer");

define_key(content_buffer_normal_keymap, "M-s", "toggle-scrollbars");

function define_switch_buffer_key (key, buf_num) {
    define_key(default_global_keymap, key,
               function (I) {
                   switch_to_buffer(I.window,
                                    I.window.buffers.get_buffer(buf_num));
               });
}
for (let i = 0; i < 10; ++i) {
    define_switch_buffer_key(String((i+1)%10), i);
}


//_* «COMMANDS» (to ".COMMANDS")

interactive("copy-current-url", "Copy current URL to clipboard",
    function (I) {
        writeToClipboard(I.buffer.current_uri.spec);
        I.minibuffer.message(I.buffer.current_uri.spec);
    });

interactive("duplicate-buffer", "Duplicate buffer",
            function (I) {
              browser_object_follow(I.buffer, OPEN_NEW_BUFFER, I.buffer.current_uri.spec);
            });

interactive("find-alternate-url-new-buffer", "Open a URL in a new window",
    follow_new_buffer,
    $browser_object = browser_object_alternate_url,
    $prompt = "Find url");

interactive("toggle-scrollbars", "Toggle scrollbars",
            function (I) {
                I.buffer.browser.contentWindow.scrollbars.visible = !I.buffer.browser.contentWindow.scrollbars.visible;
                // FIXME a way to only "reload" the scrollbars?
                // var element = yield read_browser_object(I);
                // reload(I.buffer, I.P, element, I.forced_charset);
                reload(I.buffer, false, null, I.forced_charset);
            });

interactive("toggle-images", "Toggle loading of images",
            function (I) {
                if (get_pref('permissions.default.image') == 1)
                    session_pref("permissions.default.image", 2);
                else
                    session_pref("permissions.default.image", 1);
                reload(I.buffer, false, null, I.forced_charset);
            });

// FIXME
// function unicode (w, s) {
//     w.minibuffer.message((yield shell_command("urxvt -e unicode " + s)));
// }
function unicode (w, s) {
    shell_command_blind("urxvt -hold -e sh -c 'unicode " + s + "'");
}
function unicode (w, s) {
    shell_command_blind("urxvt -hold -e sh -c 'echo " + s + "| od -x" + "'");
}
// function unicode (w, s) {
//     w.minibuffer.message("ach jo");
// }
interactive("unicode-selection", "Run `unicode' on the contents of X selection and display the output.",
            function (I) {
                unicode(I.window, read_from_x_primary_selection());
            });

//_* «CSS» (to ".CSS")
register_user_stylesheet(
    make_css_data_uri(["* {background: black !important; color: #a77 !important;}",
                       ":link, :link * {color: #008800 !important;}",
                       ":visited, :visited * {color: #40bf40 !important;}",
                       "a:hover { color: #008888 !important; }"
                      ]));

theme_load_paths.push("~/.conkerorrc/themes/");
theme_load("blackened"); 

// register_user_stylesheet(
//     make_css_data_uri([
//         // why does this not work??!!!#@#*#(((
//         // "* { font-size: 13px; }",
//         // and why THE FUCK is this needed??!!#####*@)$
//         "{}",
//         "#minibuffer, .mode-line {font-size: 11px;}",
//                        // "#minibuffer-prompt {color:red;}"
//                       ],
//                       $namespace = XUL_NS));


//_* «FUNCTIONS» (to ".FUNCTIONS")
// [[gnus:gmane.comp.mozilla.conkeror#m3sk9i3arh.wl%emanuelheitlinger@gmail.com][Email from Emanuel Heitlinger: Re: open current url in emacs ]]
function shell_on_url(funcname, funcdesc, cmd) {
    //Create an interactive function for running a predetermined
    //shell command on a url
    //Bind a specific shell command for a url to 'functionname'

    //Taken largely from "shell-command-on-url"  and
    //"shell-command-on-file" in commands.js
    interactive(funcname, funcdesc,
        function (I) {
            var cwd = I.local.cwd;
            var element = yield read_browser_object(I);
            var spec = load_spec(element);
            var uri = load_spec_uri_string(spec);
            shell_command_with_argument_blind(cmd, uri, $cwd = cwd);
        },
        $browser_object = browser_object_links);
}


//_* «MISC» (to ".MISC")
session_pref("xpinstall.whitelist.required", false);

//_ . Password management
session_pref("signon.rememberSignons", true);
session_pref("signon.expireMasterPassword", false);
session_pref("signon.SignonFileName", "signons.txt");

Components.classes["@mozilla.org/login-manager;1"]
    .getService(Components.interfaces.nsILoginManager);

//_ . «jQuery integration» (to ".jQuery integration")
function install_jquery(d) {
    var script_el = d.createElementNS(XHTML_NS, "script");
    script_el.setAttribute("language", "javascript");
    script_el.setAttribute("type", "text/javascript");
    script_el.setAttribute("src", "http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js");
    d.body.appendChild(script_el);
}

function jquery_this_doc(d, js_code) {
    install_jquery(d);
    var script_el = d.createElementNS(XHTML_NS, "script");
    script_el.textContent = js_code;
    d.body.appendChild(script_el);
}

interactive("jquery-here",
            "load jquery.js into this page, then your command",
            function(I) {
                jquery_this_doc(I.buffer.document, (yield I.minibuffer.read($prompt = "jq: ", $history = "jquery-here")));
                // Providing a $history is what allows editing/replay of earlier commands
            });

// prevent accidentally quitting Conkeror
add_hook("window_before_close_hook",
         function () {
             var w = get_recent_conkeror_window();
             var result = (w == null) ||
                 "y" == (yield w.minibuffer.read_single_character_option(
                     $prompt = "Quit Conkeror? (y/n)",
                     $options = ["y", "n"]));
             yield co_return(result);
         });


// the default page for new buffers.
// homepage = "about:blank";

// load urls from the command line in new buffers instead
// of new windows.
url_remoting_fn = load_url_in_new_buffer;
// load download buffers in the background in the current
// window, instead of in new windows.
download_buffer_automatic_open_target = OPEN_NEW_BUFFER_BACKGROUND;

// save a keystroke when selecting a unique dom node by number.
// hints_auto_exit_delay = 500;
// display properties of the current selected node during
// the hints interaction.
hints_display_url_panel = true;

minibuffer_auto_complete_default = true;

// default directory for downloads and shell commands.
// cwd = get_home_directory();
// cwd.append("downloads");

// automatically handle some mime types internally.
// content_handlers.set("application/pdf", content_handler_save);

// external programs for handling various mime types.
external_content_handlers.set("application/pdf", "xpdf");
external_content_handlers.set("video/*", "urxvt -e mplayer");

// use vi as external editor.
editor_shell_command = "emacsclient -s /home/stepnem/.emacs.d/server/server";
// editor_shell_command = "urxvt -e vim";
// view source in your editor.
view_source_use_external_editor = true;

// let xkcd-mode put the funny alt text into the page.
xkcd_add_title = true;

// function disable_scrollbars (buffer) {
//     buffer.browser.contentWindow.scrollbars.visible = false;
// }
// add_hook("content_buffer_location_change_hook", disable_scrollbars);

//_ . «MOUSE» (to ".MOUSE")
mouse_back = 2;
// mouse_forward = 2;

{
    let navigate_click = function(event) {
        let w = get_recent_conkeror_window().buffers.current.web_navigation;
        if (event.button == mouse_back && w.canGoBack) w.goBack();
        // else if (event.button == mouse_forward && w.canGoForward) w.goForward();
        else return;
        event.stopPropagation();
    }

    let install_handler = function (buffer) {
        buffer.browser.addEventListener("click", navigate_click, true);
    }

    add_hook("create_buffer_hook", install_handler);
}

//_ . «Completion type changer» (to ".Completion type changer")
// http://bugs.conkeror.org/issue10
// todo: on the fly in minibuffer

define_variable("set_completion_keys",
    {w: [true,  false, false],
     b: [false, true,  false],
     h: [false, false, true ],
     a: [true,  false, true ],
     i: [true,  false, true ],
     d: [true,  true,  false]},
    "Keys to define in set_completion_keymap to get certain combinations " +
    "of completions.  Each key has a corresponding vector with three " +
    "boolean values corresponding to webjumps, bookmarks and history.");

// Note: when QUERY_TYPE_UNIFIED works, change to: a: [true, true, true]


function set_completion(type) {
    var c = set_completion_keys[type];
    if (c == undefined)
        throw new Error("invalid completion key: " + type);
    url_completion_use_webjumps  = c[0];
    url_completion_use_bookmarks = c[1];
    url_completion_use_history   = c[2];
}

function show_completion(minibuffer) {
    var ids = ["Completion:"];
    url_completion_use_webjumps  && ids.push("webjumps");
    url_completion_use_bookmarks && ids.push("bookmarks");
    url_completion_use_history   && ids.push("history");
    minibuffer.show(ids.join(" "));
}

/* Set completion type according to the last keystroke in the key sequence. */
interactive("set-completion", null, function (I) {
    set_completion(I.key_sequence.pop());
    show_completion(I.minibuffer);
});

interactive("show-completion", null, function (I) {
    show_completion(I.minibuffer);
});

define_keymap("set_completion_keymap");
define_key(default_base_keymap, "C-l", set_completion_keymap);
for (let k in set_completion_keys)
    define_key(set_completion_keymap, k, "set-completion");
define_key(set_completion_keymap, "s", "show-completion");

//_ . «MOZREPL» (to ".MOZREPL")
if ('@hyperstruct.net/mozlab/mozrepl;1' in Cc) {
  var mozrepl = Cc['@hyperstruct.net/mozlab/mozrepl;1']
    .getService(Ci.nsIMozRepl);
  if (! mozrepl.isActive())
    mozrepl.start(4242);
}

let (mozrepl_init = get_home_directory()) {
    mozrepl_init.appendRelativePath(".mozrepl.js");
    session_pref('extensions.mozrepl.initUrl', make_uri(mozrepl_init).spec);
}


//_* «MODULES» (to ".MODULES")
require("clicks-in-new-buffer");

require("adblockplus");
require("dom-inspector");
require("noscript");
require("session");
require("venkman");
session_auto_save_auto_load = "prompt";

require("block-content-focus-change.js");

require("gmane");

//_* «WEBJUMPS» (to ".WEBJUMPS")
define_webjump("archive.org", "http://www.archive.org/search.php?query=%s");

//_ . Site Searches
define_webjump("worg", "http://www.google.com/cse?cx=002987994228320350715%3Az4glpcrritm&ie=UTF-8&q=%s&sa=Search&siteurl=orgmode.org%2Fworg%2F");

//_ . Social
add_delicious_webjumps("cephalocereus");
define_webjump("reddit", "http://www.reddit.com/search?q=%s");
define_webjump("youtube", "http://www.youtube.com/results?search_query=%s&search=Search");
define_webjump("youtube-user", "http://youtube.com/profile_videos?user=%s");

//_ . Wikis
// define_webjump("emacswiki", "http://www.emacswiki.org/cgi-bin/wiki?search=%s");
define_webjump("emacswiki",
    "http://www.google.com/cse?cx=004774160799092323420%3A6-ff2s0o6yi"+
        "&q=%s&sa=Search&siteurl=emacswiki.org%2F",
    $alternative="http://www.emacswiki.org/");

require("wikipedia");
wikipedia_webjumps_format = "wp-%s"; // controls the names of the webjumps.  default is "wikipedia-%s".
define_wikipedia_webjumps("en", "cs", "zh");
// define_wikipedia_webjumps(); // To make use of ALL of the webjumps (200+).

//_ . ---
require("index-webjump.js");
index_webjumps_directory = get_home_directory();
index_webjumps_directory.appendRelativePath(".conkerorrc/index-webjumps");

// define_gitweb_summary_webjump("gitweb-ko", "http://git.kernel.org");
define_gitweb_summary_webjump("gitweb-cz", "http://repo.or.cz/w");

define_xpath_webjump(
    "gitdoc",
    "http://www.kernel.org/pub/software/scm/git/docs/",
    '//xhtml:dt/xhtml:a',
    $description = "Git documentation");
// ---

//_ . Translation & Dictionaries
define_webjump("etymonline", "http://www.etymonline.com/index.php?search=%s");
define_webjump("jisho", "http://javascript:void(q=window.getSelection?window.getSelection():(document.getSelection?document.getSelection():(document.selection?document.selection.createRange().text:'')));if(q=='')void(q=prompt('Enter%20a%20Japanese',''));if(q){void(djwin=window.open('http://jisho.org/lite/words?jap='+encodeURIComponent(q),'djwin','width=520,height=200,resizable=yes,scrollbars=yes,toolbar=no,location=no,directories=no,status=yes,menubar=no,copyhistory=no'));void(setTimeout('djwin.focus()',1));};");
define_webjump("myetymology", "http://www.myetymology.com/english/%s");
define_webjump("thefreedictionary", "http://www.thefreedictionary.com/%s");
define_webjump("trans", "http://translate.google.com/translate_t#auto|en|%s");
define_webjump("urban", "http://www.urbandictionary.com/define.php?term=%s");

define_webjump("e2j",
    function (term) {
        return load_spec(
            { uri: "http://www.freedict.com/onldict/onldict.php",
              post_data: make_post_data([['search', term], ['exact', 'true'], ['selected', '10'],
                                         ['from', 'English'], ['to', 'Japanese'],
                                         ['fname', 'eng2jap1'], ['back', 'jap.html']]) });
    },
    $alternative = "http://www.freedict.com/onldict/jap.html",
    $argument = 'optional');

define_webjump("j2e",
    function (term) {
        return load_spec(
            { uri: "http://www.freedict.com/onldict/onldict.php",
              post_data: make_post_data([['search', term], ['exact', 'true'], ['selected', '10'],
                                         ['from', 'Japanese'], ['to', 'English'],
                                         ['fname', 'eng2jap2'], ['back', 'jap.html']]) });
    },
    $alternative = "http://www.freedict.com/onldict/jap.html",
    $argument = 'optional');

//_ . Search Engines
define_webjump("cuil", "http://www.cuil.com/search?q=%s");
define_webjump("duckduckgo", "http://duckduckgo.com/?q=%s");
define_webjump("ixquick", "http://ixquick.com/do/metasearch.pl?query=%s");
define_webjump("sogou", "http://www.sogou.com/web?query=%s");
define_webjump("scroogle", "http://www.scroogle.org/cgi-bin/nbbw.cgi?Gw=%s");
define_webjump("scrooglessl", "https://ssl.scroogle.org/cgi-bin/nbbwssl.cgi?Gw=%s");

//_ . Misc
define_webjump("down?", function (url) {
    if (url) {
        return "http://downforeveryoneorjustme.com/" + url;
    } else {
        return "javascript:window.location.href='http://downforeveryoneorjustme.com/'+window.location.href;";
   }
}, $argument = "optional");

define_webjump("wayback", function (url) {
    if (url) {
        return "http://web.archive.org/web/*/" + url;
    } else {
        return "javascript:window.location.href='http://web.archive.org/web/*/'+window.location.href;";
    }
}, $argument = "optional");

define_webjump("alpha", "http://www36.wolframalpha.com/input/?i=%s");
define_webjump("longurl", "javascript:void(function(){if(typeof%20jQuery%20==%20'undefined'){var%20s=document.createElement('script');s.src='http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js';document.getElementsByTagName('head')[0].appendChild(s);}var%20l=document.createElement('script');l.src='http://www.longurlplease.com/js/longurlplease.js';document.getElementsByTagName('head')[0].appendChild(l);function%20runIfReady(){try{if($.longurlplease){%20clearInterval(interval);%20$.longurlplease();}}catch(e){}};%20var%20interval%20=%20window.setInterval(runIfReady,100);}())");

//_ . Comp
define_webjump("codesearch", "http://www.google.com/codesearch?q=%s");

// Docs
define_webjump("hoogle", "http://haskell.org/hoogle/?hoogle=%s",
               $alternative = "http://haskell.org/hoogle/");
define_webjump("mdc", "https://developer.mozilla.org/Special:Search?search=%s&type=fulltext&go=Search");
define_webjump("pltdoc", "file:///usr/plt/doc/search/index.html?q=%s");
define_webjump("rfc", "http://www.ietf.org/rfc/rfc%s.txt");

// Gmane
define_webjump("gmane-conkeror", "http://search.gmane.org/?query=%s&group=gmane.comp.mozilla.conkeror&sort=date");
define_webjump("gmane-emacs-devel", "http://search.gmane.org/?query=%s&group=gmane.emacs.devel&sort=date");
define_webjump("gmane-git", "http://search.gmane.org/?query=%s&group=gmane.comp.version-control.git");
define_webjump("gmane-org", "http://search.gmane.org/?query=%s&group=gmane.emacs.orgmode");
define_webjump("gmane-vim-emulation", "http://search.gmane.org/?query=%s&group=gmane.emacs.vim-emulation&sort=date");
define_webjump("gmane-vimperator", "http://search.gmane.org/?query=%s&group=gmane.comp.mozilla.firefox.vimperator&sort=date");

// Debian
define_webjump("debpkg", "http://packages.debian.org/%s");
define_webjump("debfile", "http://packages.debian.org/?searchon=contents&keywords=%s&mode=path&suite=unstable&arch=any");
define_webjump("debbugs", "http://bugs.debian.org/%s");
define_webjump("debpts", "http://packages.qa.debian.org/%s");
define_webjump("debpopcon", "http://qa.debian.org/popcon.php?package=%s");
define_webjump("buildd", "https://buildd.debian.org/%s");
define_webjump("buildd-experimental", "http://experimental.ftbfs.de/%s");
define_webjump("buildd-ports", "http://buildd.debian-ports.org/build.php?pkg=%s");
define_webjump("debqa", "http://qa.debian.org/developer.php?login=%s");

// Ubuntu
define_webjump("ubuntupkg", "http://packages.ubuntu.com/%s");
define_webjump("ubuntufile", "http://packages.ubuntu.com/search?searchon=contents&keywords=%s&mode=path&arch=any");
define_webjump("ubuntubugs", "http://launchpad.net/ubuntu/+source/%s");
define_webjump("launchpad", "https://launchpad.net/+search?field.text=%s");

define_webjump("github", "http://github.com/search?q=%s&type=Everything");
define_webjump("gitorious", "http://gitorious.org/search?q=%s");
define_webjump("ohloh", "https://www.ohloh.net/p?query=%s");
define_webjump("savannah", "https://savannah.gnu.org/search/?words=%s&type_of_search=soft");

//_* «fileLocalVariables» (to ".fileLocalVariables")
// Local Variables:
// ee-anchor-format: "«%s»"
// ee-comment-prefix: "/"
// ee-line-start: "/+_? *. "
// mode: eev
// allout-layout: (* -1 : 0)
// End: