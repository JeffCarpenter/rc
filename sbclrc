;; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-

(in-package #:cl-user)

#+(or sbcl ecl) (require :asdf)
;; #-(or sbcl ecl) (load #p"/usr/share/common-lisp/source/asdf/asdf.lisp")

;;;; QuickLisp :start --
;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(progn
  (let* ((qlisp-parent-dir
           (car (member-if #'directory '(#p"/usr/local/share/common-lisp/source/"))))
         (quicklisp-init
           (when qlisp-parent-dir
             (merge-pathnames "quicklisp/setup.lisp" qlisp-parent-dir))))
    (when (and
           quicklisp-init
           (probe-file quicklisp-init))
      (load quicklisp-init))))
;;;; QuickLisp :end


;; (asdf:clear-source-registry)


;;;;;; ASDF2 ;;;;;;
;; see: http://xach.livejournal.com/278047.html?thread=674335
;; Second, Quicklisp includes ASDF2. I like to set up ASDF2 to scan a
;; particular directory tree, ~/src/lisp/, for local systems. To do
;; that, I create a config file named
;; ~/.config/common-lisp/source-registry.conf.d/projects.conf that has
;; this in it:

;; (:tree (:home "src/lisp/"))

;; With that file in place, I can add new projects to that directory
;; tree, and after an (asdf:initialize-source-registry) the project's
;; systems will be loadable with asdf:load-system. I can unpack
;; tarballs, check things out from source control systems, or create
;; new projects and they'll all be easily available for loading.

;; ASDF2's default setup also scans a directory called
;; ~/.local/share/common-lisp/source/, so if you don't mind putting
;; projects there, you can use that without any additional
;; configuration.

;; With Quicklisp installed and ASDF2 configured, here are the steps I
;; follow when I get an idea and I want to explore it in Common Lisp.

(asdf:initialize-source-registry)

;;;;;; ASDF2 ;;;;;;

;; (ql-http:fetch "http://beta.quicklisp.org/client/2014-01-30/client-info.sexp" (ql-setup:qmerge "client-info.sexp"))

;; Creates problem when imbedded in image.
;; (ql:quickload "quicklisp-slime-helper")
#+quicklisp
(progn
  (progn
    (defparameter *quicklisp-local-home-dir* (merge-pathnames "../paradise/opt/lisp/common-lisp/quicklisp/" (user-homedir-pathname)))
    (when (probe-file (merge-pathnames "local-projects" *quicklisp-local-home-dir*))
      (nconc ql:*local-project-directories* (list (merge-pathnames "local-projects" *quicklisp-local-home-dir*)))))

  (progn
    (progn
      (ql:update-dist "quicklisp") ; To get updated software
      (ql:update-client))           ; To update the Quicklisp client

    (progn
      (ql:quickload :quickproject)
      (ql:quickload :vecto)
      (ql:quickload :sheeple)
      (ql:quickload :cl-cont)
      (ql:quickload :uiop))))

;; load my utils
(when (member
       "IN.NET.SHARAD.UTILS"
       (mapcar
        #'package-name
        (list-all-packages))
       :test #'string=)
  (require :in.net.sharad.utils))


;;; LineEdit
;;; http://www.reddit.com/r/lisp/comments/gzip8/linedit_adds_history_completion_and_editing_to/
;;; Check for --no-linedit command-line option.
#+quicklisp
(progn
  (if (member "--no-linedit" sb-ext:*posix-argv* :test 'equal)
      (setf sb-ext:*posix-argv*
            (remove "--no-linedit" sb-ext:*posix-argv* :test 'equal))
      (when (interactive-stream-p *terminal-io*)
        (require :sb-aclrepl)
        ;; https://www.common-lisp.net/project/linedit/
        ;; https://github.com/sharplispers/linedit

        (progn
          (ql:quickload :cffi)
          (ql:quickload :cffi-grovel)
          ;; (require :cffi)
          (require :cffi)
          (ql:quickload :osicat)
          ;; (ql:quickload :madeira-port)
          (ql:quickload :linedit)
          (require :linedit)
          (funcall (intern "INSTALL-REPL" :linedit)
                   :wrap-current t
                   :eof-quits t)
          ))))
;; (progn
;;   (linedit:linedit :prompt "-> ")
;;   (linedit:formedit :prompt1 "=> " :prompt2 "|   "))
;;; LineEdit
