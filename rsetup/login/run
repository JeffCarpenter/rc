#!/bin/zsh


if ! (( ${+RSETUP_LOGIN_RUN} )) ; then
    RSETUP_LOGIN_RUN=done
else
    exit 0;
fi

if [ ! "$SSH_CONNECTION" -a $(id -u) -ne 0 ] ; then # don't open on ssh connection, and when user is root.

    if whence -p amixer >& /dev/null ; then
# Music
## Playback
        amixer -- sset  Master   100% unmute >&/dev/null
        amixer -- sset  PCM      100% unmute >&/dev/null
        amixer -- sset  Speaker       unmute >&/dev/null
        amixer -- sset  Beep     100% unmute >&/dev/null

## Capture
        amixer -- sset 'Front Mic Boost' 0% >&/dev/null
        amixer -- sset 'Mic Boost'       0% >&/dev/null

## Do not know
        amixer -- sset 'Caller ID'   mute >&/dev/null
        amixer -- sset 'Off-hook'    mute >&/dev/null
    fi


    if [  -e $PRIVATE_DIR ] && [ "x" != "x$DISPLAY" ] ; then
        [ -x $HOME/bin/ecryptfs-mount-private ] &&
        timeout 7 $HOME/bin/ecryptfs-mount-private >&/dev/null
    fi


    if whence -p remind >& /dev/null &&
        ! pgrep remind  >& /dev/null ; then
    # remind -z1 \
    #     -k"~/bin/popremind %s &" \
    #     ${DOTREMINDERS-$HOME/Documents/CreatedContent/contents/misc/remind/Reminders/init.rem} &!

        if [ -r ${DOTREMINDERS-$HOME/Documents/CreatedContent/contents/misc/remind/Reminders/init.rem} ] ; then
            remind -z1 \
                -k~/bin/popremind\ %s\ \& \
                ${DOTREMINDERS-$HOME/Documents/CreatedContent/contents/misc/remind/Reminders/init.rem} &!
        fi

    # for testing remind that do not go into daemon mode, try below command
    # remind -aqh -k"~/bin/popremind %s &" ${DOTREMINDERS-~/.Organize/remind/Reminders/init.rem}

    fi

    if whence -p emacs >& /dev/null || ! pgrep emacs >& /dev/null
    then
	      echo emacs >& /dev/null

        if [ "x$EMACS_SERVER_NAME" = "x" ]
        then
            EMACS_SERVER_NAME=general
            export EMACS_SERVER_NAME
        fi

        if [ "x$EMACS_DIST_DIR" = "x" ]
        then
            EMACS_DIST_DIR=.xemacs
            export EMACS_DIST_DIR
        fi


        foreach server ( $EMACS_SERVER_NAME ) {
            if [ ! -e ~/.emacs.d/server/${server} ] ||
       	        ! { # bundler command is not here for timeout it only for zsh
                # do not delete: timeout [ TIMEOUT ] don't recognize command `command', it is only for zsh
                timeout 7 emacsclient -f ~/.emacs.d/server/${server}  -e '(message "works")' >& /dev/null ;
                # timeout 10 emacsclient -f ~/.emacs.d/server/${server}  -e '(message "works")'

                # timeout 16 emacsclient -f ~/.emacs.d/server/${server}  -e '(message "works")';
                }
            then
            # blow one is not allow gnus to read its ~/.gnus file automatically.
	        # rm -f   \#.ido.last\#
                pkill emacs

                EMACS_STARTUP_LOG_DIR=~/.emacs.d/.cache/autoconfig/startup/$server/

                mkdir -p $EMACS_STARTUP_LOG_DIR

                # export GDK_RGBA=0
                # EMACS_SERVER_NAME=$server command emacs --daemon=$server |& tee $EMACS_STARTUP_LOG_DIR/startup.log
                # GDK_RGBA=0 EMACS_SERVER_NAME=$server command emacs --daemon=$server |& tee $EMACS_STARTUP_LOG_DIR/startup.log
                if whence -p dbus-launch >& /dev/null
                then
                    GDK_RGBA=0 EMACS_SERVER_NAME=$server  DISPLAY=:0.0 timeout 240s dbus-launch --autolaunch=$MY_DBUS_SESSION emacs --daemon=$server |& tee $EMACS_STARTUP_LOG_DIR/startup.log
                else
                    GDK_RGBA=0 EMACS_SERVER_NAME=$server  DISPLAY=:0.0 timeout 240s emacs --daemon=$server |& tee $EMACS_STARTUP_LOG_DIR/startup.log
                fi
                print "Emacs Daemon started\n\n\n\nstatus $?\n\n" >> $EMACS_STARTUP_LOG_DIR/startup.log

                unset EMACS_STARTUP_LOG_DIR

                # disown %emacs
            fi
        }
	      echo emacs1 >& /dev/null
    fi

    # foreach server (general) {
    #     if [ ! -e ~/.emacs.d/server/${server} ] ||
    #         # do notr delete: timeout [ TIMEOUT ] don't recognize command `command', it is only for zsh
    #    	    ! timeout 7 emacsclient -f ~/.emacs.d/server/${server}  -e '(message "works")'; then
    #         # blow one is not allow gnus to read its ~/.gnus file automatically.
    #         pkill emacs ; EMACS_SERVER_NAME=$server command emacs --daemon=$server
    #     fi
    # }

fi






if whence leave  >& /dev/null && pgrep leave >& /dev/null
then
    leave +0800
fi

atq
if [ $(atq | cut -f1 | wc -l) -gt 0 ] ; then
    atrm  $(atq | cut -f1) >& /dev/null
fi




__comp=login
__subcomp=run
if [ "x${HOST}" != "x" ] ; then
    if [ -d ~/.rsetup/${__comp}/${__subcomp}.d/${HOST} ] ; then
        rm -rf ~/.rsetup/${__comp}/${__subcomp}.d/${HOST}
    fi

    tdir=$(readlink -m ~/.rsetup/${__comp}/${__subcomp}.d/)
    if [ ! -d $tdir ] ; then
        mkdir -p $tdir
        cat <<'EOF' > $tdir/.gitignore
*
!.stub
!.gitignore
EOF
        unset tdir
    fi
    if [ ! -e ~/.rsetup/${__comp}/${__subcomp}.d/${HOST} ] ; then
        cp ~/.rsetup/${__comp}/${__subcomp}.tmpl ~/.rsetup/${__comp}/${__subcomp}.d/${HOST}
    fi

    if [ -r ~/.rsetup/${__comp}/${__subcomp}.d/${HOST} ] ; then
        . ~/.rsetup/${__comp}/${__subcomp}.d/${HOST}
    fi

else
    echo ${__subcomp} var HOST is not set $HOST
fi
unset __subcomp
unset __comp
