# -*- Mode: shell-script; indent-tabs-mode: nil -*-


__comp=login
__subcomp=env
if [ "x${HOST}" != "x" ] ; then
    if [ -d ~/.rsetup/${__comp}/${__subcomp}.d/${HOST} ] ; then
        rm -rf ~/.rsetup/${__comp}/${__subcomp}.d/${HOST}
    fi

    tdir=$(readlink -m ~/.rsetup/${__comp}/${__subcomp}.d/)
    if [ ! -d $tdir ] ; then
        mkdir -p $tdir
        cat <<'EOF' > $tdir/.gitignore
*
!.stub
!.gitignore
EOF
        unset tdir
    fi
    if [ ! -e ~/.rsetup/${__comp}/${__subcomp}.d/${HOST} ] ; then
        cp ~/.rsetup/${__comp}/${__subcomp}.tmpl ~/.rsetup/${__comp}/${__subcomp}.d/${HOST}
    fi

    if [ -r ~/.rsetup/${__comp}/${__subcomp}.d/${HOST} ] ; then
        . ~/.rsetup/${__comp}/${__subcomp}.d/${HOST}
    fi

else
    echo ${__subcomp} var HOST is not set $HOST
fi
unset __subcomp
unset __comp


PRIVATE_DIR=$HOME/.Private
SSH_KEYS_DIR=$HOME/.ssh/login-keys.d
SCREEN4KEYCHAIN=keychain
KEYCHAINDIR=$HOME/.keychain-login
EMACS_SSH_AGENT_FILE=~/.emacs.d/autoconfig/ssh/ssh-agent-$(hostname -f).el
export SCREEN4KEYCHAIN
export KEYCHAINDIR

if [ "${LOGIN_ENV}x" = "x" ]
then
    LOGIN_ENV=LOGIN_ENV
    HOST=$(uname -n)

    [ $SHELL = "zsh" ] && emulate sh

    # {{{ start at least one screen what ever be the case.
    if [ "$UID" != "0" ]        # start at least one screen what ever be the case.
    then
        if ! screen -x $SCREEN4KEYCHAIN -ls 2>/dev/null |
            sed -n '/^There/,$p'                |
            sed -n 2p                           |
            awk '{ print $1 }'                  |
            grep $SCREEN4KEYCHAIN 2>&1 > /dev/null
        then
            if whence -p tempfile 2>&1 >/dev/null
            then
                screentmprc=$(tempfile)
            else
                screentmprc=${TMP:-/tmp}/screenrc$$$RANDOM
            fi
            cat <<-'EOF' > $screentmprc
		defshell /bin/zsh
		setenv SHELL /bin/zsh
		escape 
		vbell off # always
		backtick 0 30 30 sh -c 'screen -ls | grep --color=no -o "$PPID[^[:space:]]*"'
		hardstatus alwayslastline
		hardstatus string '%{= kC}|%`:%h|%=%{= kG}[%{G}%H%{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %d/%m %{W}%c %{g}]'
		#hardstatus alwayslastline "%= %3n %t%? [%h]%? %="
		caption always "%= %-w%L>%{= BW}%n*%t%{-}%52<%+w %L="
		# http://aperiodic.net/screen/commands:idle
		# idle 600
		idle 0
		EOF

            screen -S $SCREEN4KEYCHAIN -c $screentmprc -d -m
            rm -f $screentmprc

        fi                  # if screen -x $SCREEN4KEYCHAIN -ls
    fi
    # }}}

    if [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ] || # ssh-agent pid is not set
       ! ps ${SSH_AGENT_PID} 2>&1 > /dev/null # if pid is set and no working alive ssh-agent process.
    then
        if [ -f ${KEYCHAINDIR}/${HOST}-sh ]
        then
            . ${KEYCHAINDIR}/${HOST}-sh
            if [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ] || # ssh-agent pid is not set
               ! ps ${SSH_AGENT_PID} 2>&1 > /dev/null # check if ${KEYCHAINDIR}/${HOST}-sh's ssh-agent is alive or not, if pid is set and no working alive ssh-agent process.
            then
                unset SSH_AGENT_PID
                unset SSH_AUTH_SOCK
                rm -f ${KEYCHAINDIR}/${HOST}-sh
            fi                  # if [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ] || # ssh-agent pid is not set
        fi                      # if [ -f ${KEYCHAINDIR}/${HOST}-sh ]
    fi                          # if [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ] || # ssh-agent pid is not set

    if  [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ] || # ssh-agent pid is not set
        ! ps ${SSH_AGENT_PID} 2>&1 > /dev/null                        # if pid is set and no working alive ssh-agent process.
    then
        if [ "$UID" != "0" ]
        then
            if [ -f ${KEYCHAINDIR}/${HOST}-sh ]
            then
                . ${KEYCHAINDIR}/${HOST}-sh
            fi              # if [ -f ${KEYCHAINDIR}/${HOST}-sh ]
        fi                      # if [ "$UID" != "0" ]
    fi                          # if ssh-agent pid is not set


    if  [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ] && # ssh-agent pid is set
        ps ${SSH_AGENT_PID} 2>&1 > /dev/null                         && # if pid is set and working alive ssh-agent process.
        ! ssh-add -l 2>&1 > /dev/null                                # key is not added
    then
        if [ $(command ls -1 $SSH_KEYS_DIR/ | egrep -v '.pub$' | wc -l ) -ne 0 ]
        then
            if [ -t ]
            then
                ssh-add $(command ls -d1 $SSH_KEYS_DIR/* | egrep -v '.pub$' )
            else
                ssh-add $(command ls -d1 $SSH_KEYS_DIR/* | egrep -v '.pub$' ) </dev/null
            fi
        fi

        # else
        #     unset SSH_AGENT_PID
        #     unset SSH_AUTH_SOCK
        #     rm -f ${KEYCHAINDIR}/${HOST}-sh
    fi          # if  [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ]


    if [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ] &&
       ! ps ${SSH_AGENT_PID} 2>&1 > /dev/null
    then
        if [  -r $HOME/.ssh/agent-custom-$HOST ]
        then
            source $HOME/.ssh/agent-custom-$HOST
        fi
    fi                          # [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ]

    ## It run from X
    ## as X run before ssh-agent stumpwm
    ## lightdm
    ##       X
    ##        ssh-agent stumpwm
    ##  __NO_SSH_AGENT_REQUIRED: for ssh-agent not required from xprofile but from other place.
    if [ "x${__NO_SSH_AGENT_REQUIRED}" != "x" ] &&
        [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ] &&
        ! ps ${SSH_AGENT_PID} 2>&1 > /dev/null
    then
        #  && ! ps -u $USER $SSH_AGENT_PID 2>&1 > /dev/null
        # export SSH_AUTH_SOCK=""

        # pkill ssh-agent
        [  -d $HOME/.ssh ] || mkdir $HOME/.ssh


        if ! ssh-add -l 2>&1 > /dev/null &&
            [ "$UID" != "0" ]
        then

            if whence -p $HOME/bin/ecryptfs-mount-private 2>&1 > /dev/null
            then

                if [  -e $PRIVATE_DIR ] && [ "x" != "x$DISPLAY" ] ; then
                    timeout 7 $HOME/bin/ecryptfs-mount-private 2>&1 > /dev/null
                fi

                if [ -x /usr/bin/keychain ]
                then

                    #/usr/bin/keychain -q -Q --lockwait 1 id_rsa id_dsa

                    if [ $(command ls -1 $SSH_KEYS_DIR/ | egrep -v '.pub$' | wc -l ) -ne 0 ]
                    then
                        if mkdir -p ${KEYCHAINDIR}
                        then
                            /usr/bin/keychain -q                                      \
                                --ignore-missing                                      \
                                --clear --lockwait 1                                  \
                                --agents gpg,ssh                                      \
                                --inherit local-once                                  \
                                $(command ls -d1 $SSH_KEYS_DIR/* | egrep -v '.pub$' ) \
                                $SSH_KEYS_DIR/id_dsa                                  \
                                $SSH_KEYS_DIR/id_rsa                                  \
                                $SSH_KEYS_DIR/internet                                \
                                070E69E5                                              \
                                --dir ${KEYCHAINDIR}
                        fi
                        if [ -f ${KEYCHAINDIR}/${HOST}-sh ]
                        then
                            . ${KEYCHAINDIR}/${HOST}-sh
                            # trap "echo KILLING $SSH_AGENT_PID; echo kill $SSH_AGENT_PID ; [ -f ${KEYCHAINDIR}/${HOST}-sh ] && echo rm -f ${KEYCHAINDIR}/* " EXIT
                        fi              # if [ -f ${KEYCHAINDIR}/${HOST}-sh ]
                    fi

                    if [ -f ${KEYCHAINDIR}-login/${HOST}-sh ]
                    then
                        . ${KEYCHAINDIR}-login/${HOST}-sh
                        # echo cat ${KEYCHAINDIR}/${HOST}-sh >&2
                        # cat ${KEYCHAINDIR}/${HOST}-sh >&2
                        if  [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ] && # ssh-agent pid is set
                            ps ${SSH_AGENT_PID} 2>&1 > /dev/null && # if pid is set and working alive ssh-agent process.
                            ! ssh-add -l 2>&1 > /dev/null           # key is not added
                        then
                            if [ $(command ls -1 $SSH_KEYS_DIR/ | egrep -v '.pub$' | wc -l ) -ne 0 ]
                            then
                                if [ -t ]
                                then
                                    ssh-add $(command ls -d1 $SSH_KEYS_DIR/* | egrep -v '.pub$' )
                                else
                                    ssh-add $(command ls -d1 $SSH_KEYS_DIR/* | egrep -v '.pub$' ) </dev/null
                                fi
                            fi
                        fi          # [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ]
                    fi              # [ -f ${KEYCHAINDIR}/${HOST}-sh ]
                fi                  # [ -x /usr/bin/keychain ]

            fi                      # whence -p $HOME/bin/ecryptfs-mount-private 2>&1 > /dev/null
        fi                          # ! ssh-add -l 2>&1



        # eval $(ssh-agent | tee $HOME/.ssh/agent-custom-$HOST)
        # trap "echo KILLING ; kill $SSH_AGENT_PID ; rm -f $HOME/.ssh/agent-custom-$HOST " 0
        cat <<-EOF > $HOME/.ssh/agent-custom-$HOST
	# running from else
	SSH_AUTH_SOCK=$SSH_AUTH_SOCK
	SSH_AGENT_PID=$SSH_AGENT_PID
	export SSH_AUTH_SOCK SSH_AGENT_PID
	EOF

        if [ "${SSH_AUTH_SOCK}x" != "x" ]; then
            mkdir -p $(dirname $EMACS_SSH_AGENT_FILE)
            cat <<-EOF > $EMACS_SSH_AGENT_FILE
	(setenv "SSH_AUTH_SOCK"  "${SSH_AUTH_SOCK}" )
	(setenv "SSH_AGENT_PID"  "${SSH_AGENT_PID}" )
	EOF
        else
            echo SSH_AUTH_SOCK=$SSH_AUTH_SOCK >&2
            echo SSH_AGENT_PID=$SSH_AGENT_PID >&2
        fi

    else
        mkdir -p $(dirname $EMACS_SSH_AGENT_FILE)
        cat <<-EOF > $EMACS_SSH_AGENT_FILE
	(message "SSH_AUTH_SOCK is not set.")
	EOF
    fi                          # [ "x${__NO_SSH_AGENT_REQUIRED}" != "x" ]


# if pam_ssh have not created agent then we will rely on keychain.

# if ssh auth forwarding is enabled, use it and dont start keychain

# if df | grep `cat $HOME/.ecryptfs/Private.mnt ` 2>&1 > /dev/null ; then
    # ecryptfs-umount-private         # forget passphrase.

    # if ! ssh-add -l 2>&1 >/dev/null && [ "${SSH_AUTH_SOCK}x" = "x" ] && [ "$UID" != "0" ] ; then
    # if [ "${SSH_AUTH_SOCK}x" = "x" ] && [ "$UID" != "0" ] ; then

    if false                    # we are running keychain only in screen now
    then
        if ! ssh-add -l 2>&1 > /dev/null &&
            [ "$UID" != "0" ]
        then

            if whence -p $HOME/bin/ecryptfs-mount-private 2>&1 > /dev/null
            then

                if [  -e $PRIVATE_DIR ] && [ "x" != "x$DISPLAY" ] ; then
                    timeout 7 $HOME/bin/ecryptfs-mount-private 2>&1 > /dev/null
                fi

                if [ -x /usr/bin/keychain ]
                then

                    #/usr/bin/keychain -q -Q --lockwait 1 id_rsa id_dsa

                    /usr/bin/keychain -q  \
                        --ignore-missing   \
                        --clear --lockwait 1\
                    --agents gpg,ssh     \
                        --inherit local-once  \
                        $( ls -d1 $SSH_KEYS_DIR/*) \
                        $SSH_KEYS_DIR/id_dsa       \
                        $SSH_KEYS_DIR/id_rsa       \
                        $SSH_KEYS_DIR/internet 070E69E5

                    if [ -f ${KEYCHAINDIR}/${HOST}-sh ]
                    then
                        . ${KEYCHAINDIR}/${HOST}-sh
                        # echo cat ${KEYCHAINDIR}/${HOST}-sh >&2
                        # cat ${KEYCHAINDIR}/${HOST}-sh >&2
                        if  [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ] && # ssh-agent pid is set
                            ps ${SSH_AGENT_PID} 2>&1 > /dev/null && # if pid is set and working alive ssh-agent process.
                            ! ssh-add -l 2>&1 > /dev/null           # key is not added
                        then
                            if [ $(command ls -1 $SSH_KEYS_DIR/ | egrep -v '.pub$' | wc -l ) -ne 0 ]
                            then
                                if [ -t ]
                                then
                                    ssh-add $(command ls -d1 $SSH_KEYS_DIR/* | egrep -v '.pub$' )
                                else
                                    ssh-add $(command ls -d1 $SSH_KEYS_DIR/* | egrep -v '.pub$' ) </dev/null
                                fi
                            fi
                        fi          # [ "x${SSH_AGENT_PID}" != "x" -a "x${SSH_AUTH_SOCK}" != "x" ]
                    fi              # [ -f ${KEYCHAINDIR}/${HOST}-sh ]
                fi                  # [ -x /usr/bin/keychain ]

            fi                      # whence -p $HOME/bin/ecryptfs-mount-private 2>&1 > /dev/null
        fi                          # ! ssh-add -l 2>&1
    fi
# fi

# If we have ssh-agent running, forward it to the next host,
# otherwise dont try to use key authentication at all.
    if [ "${SSH_AUTH_SOCK}x" = "x" ]
    then
        # if we dont have an auth sock, dont use pub key identification
        alias ssh='ssh -o PubkeyAuthentication=no'
    else
        # We do have an auth sock, use auth forwarding
        alias ssh='ssh -A'
    fi

    [ "$SHELL" = "zsh" ] && emulate zsh


    [ -r $HOME/.rsetup/login/env.d/${HOST} ] && . $HOME/.rsetup/login/env.d/${HOST}


fi                              # [ "${LOGIN_ENV}x" = "x" ]
