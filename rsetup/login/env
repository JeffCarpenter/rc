# -*- Mode: shell-script; indent-tabs-mode: nil -*-


if [ "x${HOST}" != "x" ] ; then
    __comp=login

    if [ -d ~/.rsetup/${__comp}/env.d/${HOST} ] ; then
        rm -rf ~/.rsetup/${__comp}/env.d/${HOST}
    fi

    if [ ! -e ~/.rsetup/${__comp}/env.d/${HOST} ] ; then
        mkdir ~/.rsetup/${__comp}/env.d/
        cp ~/.rsetup/${__comp}/env.tmpl ~/.rsetup/${__comp}/env.d/${HOST}
    fi

    if [ -r ~/.rsetup/${__comp}/env.d/${HOST} ] ; then
        . ~/.rsetup/${__comp}/env.d/${HOST}
    fi

    unset __comp
else
    echo env var HOST is not set $HOST
fi


PRIVATE_DIR=$HOME/.Private
SSH_KEYS_DIR=$HOME/.ssh/login-keys.d

if [ "${LOGIN_ENV}x" = "x" ]; then
    LOGIN_ENV=LOGIN_ENV

    HOST=`uname -n`

    [ $SHELL = "zsh" ] && emulate sh


    if [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ] && ! ps ${SSH_AGENT_PID} 2>&1 > /dev/null ; then
        if [  -r $HOME/.ssh/agent-custom-$HOST ] ; then
            source $HOME/.ssh/agent-custom-$HOST
        fi
    fi

    ## It run from X
    ## as X run before ssh-agent stumpwm
    ## lightdm
    ##       X
    ##        ssh-agent stumpwm
    ##  __NO_SSH_AGENT_REQUIRED: for ssh-agent not required from xprofile but from other place.
    if [ "x${__NO_SSH_AGENT_REQUIRED}" != "x" ] && [ "x${SSH_AGENT_PID}" = "x" -a "x${SSH_AUTH_SOCK}" = "x" ] && ! ps ${SSH_AGENT_PID} 2>&1 > /dev/null ; then
        #  && ! ps -u $USER $SSH_AGENT_PID 2>&1 > /dev/null
        # export SSH_AUTH_SOCK=""

        # pkill ssh-agent
        [  -d $HOME/.ssh ] || mkdir $HOME/.ssh
        eval $(ssh-agent | tee $HOME/.ssh/agent-custom-$HOST)
        trap "echo KILLING ; kill $SSH_AGENT_PID ; rm -f $HOME/.ssh/agent-custom-$HOST " 0
        cat <<EOF > $HOME/.ssh/agent-custom-$HOST
# running from else
SSH_AUTH_SOCK=$SSH_AUTH_SOCK
SSH_AGENT_PID=$SSH_AGENT_PID
export SSH_AUTH_SOCK SSH_AGENT_PID
EOF

    if [ "${SSH_AUTH_SOCK}x" != "x" ]; then
           cat <<EOF > ~/.emacs.d/ssh-agent-$(hostname -f).el
(setenv "SSH_AUTH_SOCK"  "${SSH_AUTH_SOCK}" )
(setenv "SSH_AGENT_PID"  "${SSH_AGENT_PID}" )
EOF
    else
        echo SSH_AUTH_SOCK=$SSH_AUTH_SOCK >&2
        echo SSH_AGENT_PID=$SSH_AGENT_PID >&2
    fi

else
    cat <<EOF > ~/.emacs.d/ssh-agent-${HOST}.el
(message "SSH_AUTH_SOCK is not set.")
EOF
fi

# if pam_ssh have not created agent then we will rely on keychain.

# if ssh auth forwarding is enabled, use it and dont start keychain

# if df | grep `cat $HOME/.ecryptfs/Private.mnt ` 2>&1 > /dev/null ; then
    # ecryptfs-umount-private         # forget passphrase.

    # if ! ssh-add -l 2>&1 >/dev/null && [ "${SSH_AUTH_SOCK}x" = "x" ] && [ "$UID" != "0" ] ; then
    # if [ "${SSH_AUTH_SOCK}x" = "x" ] && [ "$UID" != "0" ] ; then
    if ! ssh-add -l 2>&1 > /dev/null && [ "$UID" != "0" ] ; then

        if whence -p $HOME/bin/ecryptfs-mount-private 2>&1 > /dev/null ; then

            if [  -e $PRIVATE_DIR ] && [ "x" != "x$DISPLAY" ] ; then
                timeout 7 $HOME/bin/ecryptfs-mount-private
            fi

            if [ -x /usr/bin/keychain ] ; then

                #/usr/bin/keychain -q -Q --lockwait 1 id_rsa id_dsa

                /usr/bin/keychain -q  \
                    --ignore-missing   \
                    --clear --lockwait 1\
                    --agents gpg,ssh     \
                    --inherit local-once  \
                    $( ls -d1 $SSH_KEYS_DIR/*) \
                    $SSH_KEYS_DIR/id_dsa       \
                    $SSH_KEYS_DIR/id_rsa       \
                    $SSH_KEYS_DIR/internet 070E69E5

                if [ -f $HOME/.keychain/${HOST}-sh ] ; then
                    . $HOME/.keychain/${HOST}-sh
                    # echo cat $HOME/.keychain/${HOST}-sh >&2
                    # cat $HOME/.keychain/${HOST}-sh >&2
                fi
            fi

        fi
    fi
# fi

# If we have ssh-agent running, forward it to the next host,
# otherwise dont try to use key authentication at all.
    if [ "${SSH_AUTH_SOCK}x" = "x" ] ; then
        # if we dont have an auth sock, dont use pub key identification
        alias ssh='ssh -o PubkeyAuthentication=no'
    else
        # We do have an auth sock, use auth forwarding
        alias ssh='ssh -A'
    fi

    [ "$SHELL" = "zsh" ] && emulate zsh


    [ -r $HOME/.rsetup/login/env.d/${HOST} ] && . $HOME/.rsetup/login/env.d/${HOST}


fi
