# -*- mode: shell-script; -*-

# default values
OFFLINEIMAPACCOUNT=Gmail
WORKPLACE=merunetworks.com
# default values




EDITOR='emacsclient -t -c -f ~/.emacs.d/server/general '
VISUAL='emacsclient -t -c -f ~/.emacs.d/server/general '

if [ "x${REMOTEEDITORHOST}" != "x" ] ; then
    EDITOR=$HOME/bin/rgeneral-editor
else
    EDITOR=$HOME/bin/general-editor
fi

VISUAL=$EDITOR

BROWSER=w3m

export EDITOR
export VISUAL
export BROWSER

GIT_DISCOVERY_ACROSS_FILESYSTEM=1
export GIT_DISCOVERY_ACROSS_FILESYSTEM

MACHINE_ID=/var/lib/dbus/machine-id
if [ -r "$MACHINE_ID" ]
then
    MY_DBUS_SESSION=$(cat $MACHINE_ID)
fi
export MY_DBUS_SESSION


if [ "x" != "x$WORKPLACE" ] ; then
    if [  -d ~/.opt/p/$WORKPLACE ] ; then
        . ~/.opt/p/$WORKPLACE/env
        # ~/.opt/p/$WORKPLACE/run
    else
        echo ~/.opt/p/$WORKPLACE directory  do not exits, so setup ~/.opt/ directory. >&2
    fi
else
    if [ ! $SUDO_USER ] && [ "$TERM" != "dumb" ] ; then
        echo WORKPLACE is not set. >&2
    fi
fi


if [ "x$EMACS_SERVER_NAME" = "x" ]
then
    EMACS_SERVER_NAME=general
    export EMACS_SERVER_NAME
fi

if [ "x$EMACS_DIST_DIR" = "x" ]
then
    EMACS_DIST_DIR=.xemacs
    export EMACS_DIST_DIR
fi


function emacs_daemon_start()
{
    if whence -p emacs >& /dev/null || ! pgrep emacs >& /dev/null
    then
	      echo emacs >& /dev/null

        if [ "x$EMACS_SERVER_NAME" = "x" ]
        then
            EMACS_SERVER_NAME=general
            export EMACS_SERVER_NAME
        fi

        if [ "x$EMACS_DIST_DIR" = "x" ]
        then
            EMACS_DIST_DIR=.xemacs
            export EMACS_DIST_DIR
        fi

        __cwd=$(pwd)

        if [ -d ~/../paradise ]
        then
            cd ~/../paradise
        fi

        for server in $EMACS_SERVER_NAME
        do
            if [ ! -e ~/.emacs.d/server/${server} ] ||
       	           ! { # bundler command is not here for timeout it only for zsh
                       # do not delete: timeout [ TIMEOUT ] don't recognize command `command', it is only for zsh
                       timeout 7 emacsclient -f ~/.emacs.d/server/${server}  -e '(message "works")' > /dev/null 2>&1
                       # timeout 10 emacsclient -f ~/.emacs.d/server/${server}  -e '(message "works")'

                       # timeout 16 emacsclient -f ~/.emacs.d/server/${server}  -e '(message "works")';
                   }
            then
                # blow one is not allow gnus to read its ~/.gnus file automatically.
	              # rm -f   \#.ido.last\#
                pkill emacs

                EMACS_STARTUP_LOG_DIR=~/.emacs.d/.cache/autoconfig/startup/$server/

                mkdir -p $EMACS_STARTUP_LOG_DIR

                # export GDK_RGBA=0
                # EMACS_SERVER_NAME=$server command emacs --daemon=$server |& tee $EMACS_STARTUP_LOG_DIR/startup.log
                # GDK_RGBA=0 EMACS_SERVER_NAME=$server command emacs --daemon=$server |& tee $EMACS_STARTUP_LOG_DIR/startup.log
                if whence -p dbus-launch >& /dev/null
                then
                    SHELL=bash GDK_RGBA=0 EMACS_SERVER_NAME=$server  DISPLAY=:0.0 timeout 240s dbus-launch --autolaunch=$MY_DBUS_SESSION emacs --daemon=$server 2>&1 | tee $EMACS_STARTUP_LOG_DIR/startup.log
                else
                    SHELL=bash GDK_RGBA=0 EMACS_SERVER_NAME=$server  DISPLAY=:0.0 timeout 240s emacs --daemon=$server |& tee $EMACS_STARTUP_LOG_DIR/startup.log
                fi
                print "Emacs Daemon started\n\n\n\nstatus $?\n\n" >> $EMACS_STARTUP_LOG_DIR/startup.log

                unset EMACS_STARTUP_LOG_DIR

                # disown %emacs
            fi
        done
	      echo emacs1 >& /dev/null

        cd $__cwd
        unset __cwd
    fi # if whence -p emacs >& /dev/null || ! pgrep emacs >& /dev/null
}

if [ "x${HOST}" = "x" ]
then
    HOST=$HOSTNAME
fi

if [ "x${HOST}" != "x" ]
then
  __comp=sh

  if [ -d ~/.rsetup/${__comp}/env.d/${HOST} ]
  then
      rm -rf ~/.rsetup/${__comp}/env.d/${HOST}
  fi
  if [ ! -e ~/.rsetup/${__comp}/env.d/${HOST} ]
  then
      mkdir -p ~/.setup/osetup/setup/rsetup.d/sh.d/env.d
      cp ~/.rsetup/${__comp}/env.tmpl ~/.rsetup/${__comp}/env.d/${HOST}
  fi

  if [ -r ~/.rsetup/${__comp}/env.d/${HOST} ]
  then
      . ~/.rsetup/${__comp}/env.d/${HOST}
  fi
  unset __comp
else
    echo env var HOST is not set $HOST
fi

unset MACHINE_ID
