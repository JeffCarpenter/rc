#!/usr/bin/env bash

# set -e
## create a setup-disk.sh
## for creating lvm disk layout for different sizes of harddisk of 500GB 1T
## which can have option
## - for full clean where no window is present
## - or window or other OSes, other linuxes could come in future
## - where window already present not going to be there only
##  here also further two
##  + only one ubuntu and window will be there
##  + ubuntu and window and other OSes or other linuxes could come in future.
## tools will be
## parted

DEBUG=1

function main()
{
    trap setup_finish EXIT SIGINT SIGTERM
    local CMDARGS=()
    running debug process_arg $*
    mboousb_setup ${CMDARGS[*]}
    info Finished $pgm
}

function mboousb_setup()
{
    export USBDEV=$1
    info CMDARGS= $*
    info \$1=$1
    if [ -f "$USBDEV" -a -b "$USBDEV" ]
    then
        info $USBDEV exists
    else
        info $USBDEV not exists
    fi
}


##
function setup_finish()
{
    : info $SETUP_TMPDIR
}

function process_arg()
{
    warn=1
    error=1


    if ! eval set -- $(getopt -n $pgm -o "dehnvw" -- $*)
    then
        verbose Wrong command line.
    fi

    while [ $# -gt 0 ]
    do
        info option $1
        case $1 in
            (-n) noaction="";;
            (-d) debug=1;;
            (-v) verbose=1;;
            (-w) warn="";;
            (-e) error="";;
            (-h) help;
                 exit;;
            (--) shift; break;;
            (-*) error "$0: error - unrecognized option $1" 1>&2; help; exit 1;;
            (*)  break;;
        esac
        shift
    done

    CMDARGS=$*
}

function running()
{
    local  notifier=$1
    local _cmd=$2
    shift
    shift

    $notifier $_cmd "$@"
    if [ ! $noaction ]
    then
        $_cmd $*
    fi
}

function print()
{
    echo "$*"
}

function error()
{
    notify "Error $*"  >&2
    logger "Error $*"
    exit -1
}

function warn()
{
    if [ $warn ] ; then
        notify "Warning: $*" >&2
    fi
    logger "Warning: $*"
}

function debug()
{
    if [ $debug ] ; then
        notify "Debug: $*" >&2
    fi
    logger "Debug: $*"
}

function verbose()
{
    if [ $verbose ] ; then
        notify "Info: $*" >&2
    fi
    logger "Info: $*"
}

function info()
{
    notify "$*" >&2
    : logger "$*"
}

function notify()
{
    print "${pgm}:" "$*"

    if [ ! -t 1 ]
    then
        notify-send "${pgm}:" "$*"
    fi
}

function logger()
{
    #creating prolem
    command logger -p local1.notice -t ${pgm} -i - $USER : "$*"
}



#verbose=1

pgm="$(basename $0)"
main "$@"
exit
